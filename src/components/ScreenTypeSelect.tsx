import { useState, useEffect } from "react";
import { Select, Stack, Loader, TextInput, Grid } from "@mantine/core";
import classes from "../styles/FloatingLabelInput.module.css";

const ScreenTypeSelect = () => {
  const [width, setWidth] = useState<string>("");
  const [height, setHeight] = useState<string>("");
  const [screenType, setScreenType] = useState<string | null>(null);
  const [screenTypes, setScreenTypes] = useState<{ name: string; screenOption: string[] }[]>([]);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const fetchScreenTypes = async () => {
      try {
        const response = await fetch("http://localhost:5000/screen-types", {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const data = await response.json();
        console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å API:", data);

        if (!data || !Array.isArray(data.types)) { // ‚úÖ –¢–µ–ø–µ—Ä—å –∂–¥–µ–º `types`
          throw new Error("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö");
        }

        setScreenTypes(data.types);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchScreenTypes();
  }, []);

  // üìå –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞
  const currentOptions = screenTypes.find((type) => type.name === screenType)?.screenOption || [];

  return (
    <Stack gap="xs"> {/* ‚úÖ –£–º–µ–Ω—å—à–∏–ª –æ—Ç—Å—Ç—É–ø—ã */}
      <Grid>
        {/* –ò–Ω–ø—É—Ç –®–∏—Ä–∏–Ω–∞ */}
        <Grid.Col span={{ base: 12, sm: 6 }}>
          <TextInput
            label="–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ (–º–º)"
            type="number"
            classNames={classes}
            value={width}
            onChange={(event) => setWidth(event.currentTarget.value)}
            required
          />
        </Grid.Col>

        {/* –ò–Ω–ø—É—Ç –í—ã—Å–æ—Ç–∞ */}
        <Grid.Col span={{ base: 12, sm: 6 }}>
          <TextInput
            label="–í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ (–º–º)"
            type="number"
            classNames={classes}
            value={height}
            onChange={(event) => setHeight(event.currentTarget.value)}
            required
          />
        </Grid.Col>
      </Grid>

      {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ */}
      {loading ? (
        <Loader size="sm" />
      ) : (
        <Select
          label="–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ *"
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
          data={screenTypes.map((type) => ({ value: type.name, label: type.name }))}
          value={screenType}
          onChange={(value) => {
            setScreenType(value);
            setSelectedOption(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞
          }}
          required
        />
      )}

      {/* –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–π –æ–ø—Ü–∏–∏ */}
      {screenType && currentOptions.length > 0 && (
        <div style={{ display: "flex", gap: "15px", marginTop: "-5px" }}> {/* ‚úÖ –ü–æ–¥–≤–∏–Ω—É–ª –±–ª–∏–∂–µ */}
          {currentOptions.map((option) => (
            <label key={option} style={{ display: "flex", alignItems: "center", gap: "5px" }}>
              <input
                type="radio"
                name="screenOption"
                value={option}
                checked={selectedOption === option}
                onChange={() => setSelectedOption(option)}
              />
              {option}
            </label>
          ))}
        </div>
      )}
    </Stack>
  );
};

export default ScreenTypeSelect;