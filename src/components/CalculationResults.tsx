import { Drawer, Table } from "@mantine/core";
import styles from "../styles/CalculationResults.module.scss";

interface CalculationResultsProps {
  opened: boolean;
  onClose: () => void;
  data: {
    width: string;
    height: string;
    screenType: string | null;
    selectedMaterial: string | null;
    selectedPixelStep: string | null;
    selectedCabinet: string | null;
    cabinetName: string | null;
    cabinetWidth: number | null;
    cabinetHeight: number | null;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è
const extractNumericPixelStep = (pixelStep: string | null): string => {
  if (!pixelStep) return "-"; // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, —Å—Ç–∞–≤–∏–º –ø—Ä–æ—á–µ—Ä–∫
  const match = pixelStep.match(/\d+(\.\d+)?/); // –ò—â–µ–º —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
  return match ? match[0] : "-"; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º; –∏–Ω–∞—á–µ –ø—Ä–æ—á–µ—Ä–∫
};


const CalculationResults = ({ opened, onClose, data }: CalculationResultsProps) => {
  if (!data.selectedCabinet || !data.cabinetWidth || !data.cabinetHeight) {
    return null; // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —á–∏—Å–ª–∞
  const screenWidth = parseInt(data.width, 10);
  const screenHeight = parseInt(data.height, 10);
  const cabinetWidth = data.cabinetWidth;
  const cabinetHeight = data.cabinetHeight;

  // üî• –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  const widthCabinetsHorizontal = Math.floor(screenWidth / cabinetWidth);
  const heightCabinetsHorizontal = Math.floor(screenHeight / cabinetHeight);
  const totalHorizontal = widthCabinetsHorizontal * heightCabinetsHorizontal;

  const widthCabinetsVertical = Math.floor(screenWidth / cabinetHeight);
  const heightCabinetsVertical = Math.floor(screenHeight / cabinetWidth);
  const totalVertical = widthCabinetsVertical * heightCabinetsVertical;

  // üî• –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤)
  const isHorizontal = totalHorizontal >= totalVertical;
  const widthCabinetsCount = isHorizontal ? widthCabinetsHorizontal : widthCabinetsVertical;
  const heightCabinetsCount = isHorizontal ? heightCabinetsHorizontal : heightCabinetsVertical;
  const totalCabinets = widthCabinetsCount * heightCabinetsCount;
  const finalWidth = widthCabinetsCount * (isHorizontal ? cabinetWidth : cabinetHeight);
  const finalHeight = heightCabinetsCount * (isHorizontal ? cabinetHeight : cabinetWidth);

  return (
    <Drawer
      opened={opened}
      onClose={onClose}
      title={<div className={styles.drawerTitle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</div>}
      position="right"
      size="xl"
    >
      <Table striped highlightOnHover withTableBorder withColumnBorders className={styles.table}>
        <thead>
          <tr>
            <th className={styles.th}>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</th>
            <th className={styles.th}>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className={styles.td}>–ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ (—à–∞–≥ –ø–∏–∫—Å–µ–ª—è)</td>
            <td className={styles.td}>{extractNumericPixelStep(data.selectedPixelStep)} –º–º</td>
          </tr>
          <tr>
            <td className={styles.td}>–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞</td>
            <td className={styles.td}>{data.screenType || "-"}</td>
          </tr>
          <tr>
            <td className={styles.td}>–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–±–∏–Ω–µ—Ç–∞</td>
            <td className={styles.td}>{data.selectedMaterial || "-"}</td>
          </tr>
        <tr>
            <td className={styles.td}>–†–∞–∑–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞</td>
            <td className={styles.td}>{`${cabinetHeight}√ó${cabinetWidth} –º–º`}</td>
          </tr>
          <tr>
            <td className={styles.td}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤</td>
            <td className={styles.td}>{totalCabinets} —à—Ç.</td> 
          </tr>
          <tr>
            <td className={styles.td}>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤</td>
            <td className={styles.td}>{isHorizontal ? "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" : "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è"}</td>
          </tr>
          <tr>
            <td className={styles.td}>–®–∏—Ä–∏–Ω–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–≥–æ –ø–æ–ª–æ—Ç–Ω–∞</td>
            <td className={styles.td}>{finalWidth} –º–º</td>
          </tr>
          <tr>
            <td className={styles.td}>–í—ã—Å–æ—Ç–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–≥–æ –ø–æ–ª–æ—Ç–Ω–∞</td>
            <td className={styles.td}>{finalHeight} –º–º</td>
          </tr>
        </tbody>
      </Table>
    </Drawer>
  );
};

export default CalculationResults;
