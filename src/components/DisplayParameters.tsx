import { useState, useEffect } from "react";
import { Select, Stack, TextInput, Grid, Button, Checkbox} from "@mantine/core";
import classes from '../styles/DisplayParameters.module.scss';
import CalculationResults from "./CalculationResults";

const DisplayParameters = () => {
  const [width, setWidth] = useState<string>("");
  const [height, setHeight] = useState<string>("");
  const [screenType, setScreenType] = useState<string | null>(null);
  const [screenTypes, setScreenTypes] = useState<{ name: string; material: string[]; option: string[] }[]>([]);
  const [pixelSteps, setPixelSteps] = useState<{ id: number; name: string; type: string; location: string[]; option: string[] }[]>([]);
  const [selectedMaterial, setSelectedMaterial] = useState<string | null>(null);
  const [availableOptions, setAvailableOptions] = useState<string[]>([]);
  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);

  const [filteredPixelSteps, setFilteredPixelSteps] = useState<string[]>([]);
  const [selectedPixelStep, setSelectedPixelStep] = useState<string | null>(null);
  const [cabinets, setCabinets] = useState<{ id: number; name: string; location: string; pixelStep: string[]; material: string[] }[]>([]);
  const [filteredCabinets, setFilteredCabinets] = useState<{ id: number; name: string; location: string; pixelStep: string[]; material: string[] }[]>([]);
  const [selectedCabinet, setSelectedCabinet] = useState<string | null>(null);
  const [loadingSteps, setLoadingSteps] = useState<boolean>(false);
  const [loadingCabinets, setLoadingCabinets] = useState<boolean>(false);
  const [drawerOpened, setDrawerOpened] = useState<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
  const isSizeValid = width.trim() !== "" && height.trim() !== "";
  const isScreenTypeSelected = isSizeValid && !!screenType;
  const isPixelStepSelected = isScreenTypeSelected && !!selectedPixelStep;
  const isCabinetSelected = isPixelStepSelected && !!selectedCabinet;
  const isMaterialSelected = isSizeValid && !!screenType && !!selectedMaterial;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    fetch("http://localhost:5000/screen-types")
      .then((res) => res.json())
      .then((data) => setScreenTypes(data.types))
      .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤:", error));
  }, []);

  useEffect(() => {
    setLoadingSteps(true);
    fetch("http://localhost:5000/pixel-steps")
      .then((res) => res.json())
      .then((data) => setPixelSteps(data.steps))
      .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–≥–æ–≤ –ø–∏–∫—Å–µ–ª—è:", error))
      .finally(() => setLoadingSteps(false));
  }, []);

  useEffect(() => {
    setLoadingCabinets(true);
    fetch("http://localhost:5000/cabinets")
      .then((res) => res.json())
      .then((data) => setCabinets(data.cabinets))
      .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤:", error))
      .finally(() => setLoadingCabinets(false));
  }, []);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ü–∏–∏ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  useEffect(() => {
    if (!screenType || !selectedMaterial) {
      setAvailableOptions([]);
      setSelectedOptions([]);
      return;
    }
  
    const selectedScreen = screenTypes.find((type) => type.name === screenType);
    if (!selectedScreen) return;
  
    setAvailableOptions(selectedScreen.option);
    setSelectedOptions([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  }, [screenType, selectedMaterial, screenTypes]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —à–∞–≥–∏ –ø–∏–∫—Å–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    if (!screenType || !selectedMaterial) {
      setFilteredPixelSteps([]);
      return;
    }
  
    const selectedScreen = screenTypes.find((type) => type.name === screenType);
    if (!selectedScreen) return;
  
    let steps = pixelSteps.filter((step) => step.location.includes(selectedScreen.name));
  
    // üî• –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–≥–∏–±–∫–∏–π —ç–∫—Ä–∞–Ω", —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ option
    if (selectedOptions.includes("–≥–∏–±–∫–∏–π —ç–∫—Ä–∞–Ω")) {
      steps = steps.filter((step) => step.option.includes("–≥–∏–±–∫–∏–π —ç–∫—Ä–∞–Ω"));
    }
  
    setFilteredPixelSteps(steps.map((step) => step.name));
    setSelectedPixelStep(null);
    setSelectedCabinet(null);
  }, [screenType, selectedMaterial, selectedOptions, pixelSteps, screenTypes]);
  

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è
  useEffect(() => {
    if (!screenType || !selectedPixelStep || !selectedMaterial) {
      setFilteredCabinets([]);
      return;
    }
  
    const selectedScreen = screenTypes.find((type) => type.name === screenType);
    if (!selectedScreen) {
      setFilteredCabinets([]);
      return;
    }
  
    setFilteredCabinets(
      cabinets
        .filter((cabinet) => 
          cabinet.location === selectedScreen.name && 
          cabinet.pixelStep.includes(selectedPixelStep) && 
          cabinet.material.includes(selectedMaterial) // üî• –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
        )
        .sort((a, b) => a.name.localeCompare(b.name))
    );
  
    setSelectedCabinet(null);
  }, [screenType, selectedPixelStep, selectedMaterial, cabinets, screenTypes]);
  

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
  const selectedCabinetName = selectedCabinet 
    ? filteredCabinets.find(c => c.id.toString() === selectedCabinet)?.name || null
    : null;

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const calculationData = {
    width,
    height,
    screenType,
    selectedMaterial,
    selectedPixelStep,
    selectedCabinet,
    selectedOptions, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
    cabinetName: selectedCabinetName,
  };

  return (
    <>
      <Stack gap="xs">
        <Grid>
          <Grid.Col span={{ base: 12, sm: 6 }}>
            <TextInput
              label="–®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ (–º–º)"
              type="number"
              value={width}
              onChange={(event) => setWidth(event.currentTarget.value)}
              required
            />
          </Grid.Col>
          <Grid.Col span={{ base: 12, sm: 6 }}>
            <TextInput
              label="–í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞ (–º–º)"
              type="number"
              value={height}
              onChange={(event) => setHeight(event.currentTarget.value)}
              required
            />
          </Grid.Col>
          <Grid.Col span={{ base: 12, sm: 6 }}>
            <Select
            label="–¢–∏–ø —ç–∫—Ä–∞–Ω–∞"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
            data={screenTypes.map((type) => ({ value: type.name, label: type.name }))}
            value={screenType}
            onChange={(value) => {
              setScreenType(value);
              setSelectedPixelStep(null);
              setSelectedCabinet(null);
            }}
            disabled={!isSizeValid}
            required
          />
          </Grid.Col>
          <Grid.Col span={{ base: 12, sm: 6 }}>
            <Select
            label="–ú–∞—Ç–µ—Ä–∏–∞–ª"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª"
            data={
              screenTypes
              .find((type) => type.name === screenType)?.material
              ?.map((mat) => ({ value: mat, label: mat }))}
              value={selectedMaterial}
              onChange={(value) => setSelectedMaterial(value)}
              disabled={!screenType}
              required
          />
          </Grid.Col>
        </Grid>
        {availableOptions.length > 0 && (
          <Stack>
            <div style={{ display: "flex", gap: "10px", flexWrap: "wrap" }}>
              {availableOptions.map((option) => (
                <Checkbox
                  classNames={classes}
                  key={option}
                  label={option}
                  checked={selectedOptions.includes(option)}
                  onChange={(event) => {
                    const updatedOptions = event.currentTarget.checked
                      ? [...selectedOptions, option]
                      : selectedOptions.filter((opt) => opt !== option);
                    setSelectedOptions(updatedOptions);
                  }}
                />
              ))}
            </div>
          </Stack>
        )}      
        <Select
          label="–®–∞–≥ –ø–∏–∫—Å–µ–ª—è"
          placeholder={loadingSteps ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥"}
          data={filteredPixelSteps.map((step) => ({ value: step, label: step }))}
          disabled={!isMaterialSelected || loadingSteps || filteredPixelSteps.length === 0}
          value={selectedPixelStep}
          onChange={(value) => {
            setSelectedPixelStep(value);
            setSelectedCabinet(null);
          }}
          required
        />

        <Select
          label="–ö–∞–±–∏–Ω–µ—Ç"
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç"
          data={filteredCabinets.map((cabinet) => ({ value: cabinet.id.toString(), label: cabinet.name }))}
          disabled={!isPixelStepSelected || loadingCabinets || filteredCabinets.length === 0}
          value={selectedCabinet}
          onChange={setSelectedCabinet}
          required
        />

        {/* –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ */}
        {isCabinetSelected && (
          <Button onClick={() => setDrawerOpened(true)} fullWidth>
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
          </Button>
        )}
      </Stack>

      {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      <CalculationResults 
        opened={drawerOpened}
        onClose={() => setDrawerOpened(false)}
        data={calculationData}
      />
    </>
  );
};

export default DisplayParameters;