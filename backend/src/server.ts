// src/server.ts
import express, { Request, Response, NextFunction, Application } from "express"; 
import http from 'http';
import dotenv from "dotenv";
import cors from "cors";
import helmet from "helmet";
import morgan from "morgan";
import passport from "passport";

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import { prisma } from './lib/prisma';
import { configurePassport } from "./config/passport"; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π

// --- –ú–∞—Ä—à—Ä—É—Ç—ã ---
import healthcheckRoute from "./routes/healthcheck";
import authRoutes from "./routes/authRoutes";
import userRoutes from "./routes/userRoutes"; 
import cabinetRoutes from "./routes/cabinetRoutes";
import cabinetComponentRoutes from "./routes/cabinetComponentRoutes"; 
import componentServiceRoutes from "./routes/componentServiceRoutes";
import ipProtectionRoutes from "./routes/ipProtectionRoutes";
import manufacturerRoutes from "./routes/manufacturerRoutes";
import materialRoutes from "./routes/materialRoutes";
import moduleRoutes from "./routes/moduleRoutes";
import screenTypeRoutes from "./routes/screenTypeRoutes";
import locationRoutes from "./routes/locationRoutes"; 
import cabinetPlacementRoutes from "./routes/cabinetPlacementRoutes"; 
import pitchRoutes from "./routes/pitchRoutes"; 
import pitchTypeRoutes from "./routes/pitchTypeRoutes"; 
import refreshRateRoutes from "./routes/refreshRateRoutes"; 
import brightnessRoutes from "./routes/brightnessRoutes"; 
import screenTypeLocationRoutes from "./routes/screenTypeLocationRoutes"; 
import screenTypePitchRoutes from "./routes/screenTypePitchRoutes"; 
import locationMaterialRoutes from "./routes/locationMaterialRoutes"; 
import locationPitchRoutes from "./routes/locationPitchRoutes"; 
import locationCabinetRoutes from "./routes/locationCabinetRoutes"; 
import materialCabinetRoutes from "./routes/materialCabinetRoutes"; 
import cabinetPlacementCabinetRoutes from "./routes/cabinetPlacementCabinetRoutes"; 
import pitchTypePitchRoutes from "./routes/pitchTypePitchRoutes"; 
//import currencyRoutes from './routes/currencyRoutes';

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config(); 
const app: Application = express(); 
const API_PREFIX = process.env.API_PREFIX || '/api/v1'; 
//console.log('[DEBUG] App created.'); // –õ–æ–≥ 1

// --- –û—Å–Ω–æ–≤–Ω—ã–µ Middleware ---
try {
    app.use(cors()); 
    app.use(helmet()); 
    app.use(express.json()); 
    app.use(morgan("dev")); 
    //console.log('[DEBUG] Basic middleware applied.'); // –õ–æ–≥ 2
    app.use(passport.initialize()); 
    //console.log('[DEBUG] Passport initialized.'); // –õ–æ–≥ 3
    configurePassport(passport); // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Passport
    //console.log('[DEBUG] Passport configured.'); // –õ–æ–≥ 4
} catch (middlewareError: any) {
    console.error('[DEBUG] –û–®–ò–ë–ö–ê –ü–†–ò –ù–ê–°–¢–†–û–ô–ö–ï –ë–ê–ó–û–í–´–• MIDDLEWARE –ò–õ–ò PASSPORT:', middlewareError);
    process.exit(1); // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
}

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ú–∞—Ä—à—Ä—É—Ç–æ–≤ API ---
//console.log(`[DEBUG] Registering routes with prefix: ${API_PREFIX}`);
try {
    app.get(API_PREFIX, (req: Request, res: Response) => {
        res.status(200).json({ message: 'Calculator API is running!' });
    });

    // --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ ---
    // –î–æ–±–∞–≤–∏–º console.log –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º app.use –¥–ª—è —Ä–æ—É—Ç–∞
    //console.log('[DEBUG] Registering: /healthcheck');
    app.use(`${API_PREFIX}/healthcheck`, healthcheckRoute);
    //console.log('[DEBUG] Registering: /auth');
    app.use(`${API_PREFIX}/auth`, authRoutes);
    //console.log('[DEBUG] Registering: /users');
    app.use(`${API_PREFIX}/users`, userRoutes); 
    //console.log('[DEBUG] Registering: /cabinets');
    app.use(`${API_PREFIX}/cabinets`, cabinetRoutes);
    //console.log('[DEBUG] Registering: /cabinet-components');
    app.use(`${API_PREFIX}/cabinet-components`, cabinetComponentRoutes);
    //console.log('[DEBUG] Registering: /component-services');
    app.use(`${API_PREFIX}/component-services`, componentServiceRoutes);
    //console.log('[DEBUG] Registering: /ip-protection');
    app.use(`${API_PREFIX}/ip-protection`, ipProtectionRoutes); 
    //console.log('[DEBUG] Registering: /manufacturers');
    app.use(`${API_PREFIX}/manufacturers`, manufacturerRoutes);
    //console.log('[DEBUG] Registering: /materials');
    app.use(`${API_PREFIX}/materials`, materialRoutes);
    //console.log('[DEBUG] Registering: /modules');
    app.use(`${API_PREFIX}/modules`, moduleRoutes);
    //console.log('[DEBUG] Registering: /screen-types');
    app.use(`${API_PREFIX}/screen-types`, screenTypeRoutes); 
    //console.log('[DEBUG] Registering: /locations');
    app.use(`${API_PREFIX}/locations`, locationRoutes); 
    //console.log('[DEBUG] Registering: /cabinet-placements');
    app.use(`${API_PREFIX}/cabinet-placements`, cabinetPlacementRoutes); 
    //console.log('[DEBUG] Registering: /pitches');
    app.use(`${API_PREFIX}/pitches`, pitchRoutes); 
    //console.log('[DEBUG] Registering: /pitch-types');
    app.use(`${API_PREFIX}/pitch-types`, pitchTypeRoutes); 
    //console.log('[DEBUG] Registering: /refresh-rates');
    app.use(`${API_PREFIX}/refresh-rates`, refreshRateRoutes); 
    //console.log('[DEBUG] Registering: /brightness-values');
    app.use(`${API_PREFIX}/brightness-values`, brightnessRoutes); 
    //console.log('[DEBUG] Registering: /screen-type-locations');
    app.use(`${API_PREFIX}/screen-type-locations`, screenTypeLocationRoutes); 
    //console.log('[DEBUG] Registering: /screen-type-pitches');
    app.use(`${API_PREFIX}/screen-type-pitches`, screenTypePitchRoutes); 
    //console.log('[DEBUG] Registering: /location-materials');
    app.use(`${API_PREFIX}/location-materials`, locationMaterialRoutes); 
    //console.log('[DEBUG] Registering: /location-pitches');
    app.use(`${API_PREFIX}/location-pitches`, locationPitchRoutes); 
    //console.log('[DEBUG] Registering: /location-cabinets');
    app.use(`${API_PREFIX}/location-cabinets`, locationCabinetRoutes); 
    //console.log('[DEBUG] Registering: /material-cabinets');
    app.use(`${API_PREFIX}/material-cabinets`, materialCabinetRoutes); 
    //console.log('[DEBUG] Registering: /cabinet-placement-cabinets');
    app.use(`${API_PREFIX}/cabinet-placement-cabinets`, cabinetPlacementCabinetRoutes); 
    //console.log('[DEBUG] Registering: /pitch-type-pitches');
    app.use(`${API_PREFIX}/pitch-type-pitches`, pitchTypePitchRoutes); 
    // if (currencyRoutes) { app.use(`${API_PREFIX}/currencies', currencyRoutes); } 
    //console.log('[DEBUG] Routes registered successfully.'); // –õ–æ–≥ 5 (—É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
} catch (routeError: any) {
    console.error('[DEBUG] –û–®–ò–ë–ö–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–û–£–¢–û–í:', routeError); 
    process.exit(1);
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
try {
    // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ (404) 
    app.use((req: Request, res: Response, next: NextFunction) => {
        const error = new Error(`–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - ${req.originalUrl}`);
        res.status(404);
        next(error); // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    });

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 
    app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
        console.error(`[ERROR HANDLER] ${err.message}\n${err.stack}`); // –ò–∑–º–µ–Ω–∏–º –ø—Ä–µ—Ñ–∏–∫—Å –ª–æ–≥–∞
        const statusCode = res.statusCode === 200 ? 500 : res.statusCode; // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 404), —Å—Ç–∞–≤–∏–º 500
        res.status(statusCode);
        res.json({
            message: statusCode === 500 ? "Internal Server Error" : err.message, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è 500
            stack: process.env.NODE_ENV === 'production' ? 'ü•û' : err.stack,
        });
    });
    //console.log('[DEBUG] Error handlers registered.'); // –õ–æ–≥ 6
} catch (errorHandlerError: any) {
     console.error('[DEBUG] –û–®–ò–ë–ö–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –û–®–ò–ë–û–ö:', errorHandlerError);
     process.exit(1);
}


// --- –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ –∏ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
const PORT = process.env.PORT || 5000;
let server: http.Server; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é server –∑–¥–µ—Å—å
try {
    //console.log(`[DEBUG] Attempting to listen on port ${PORT}...`); // –õ–æ–≥ 7
    server = http.createServer(app).listen(PORT, () => {
        //console.log('[DEBUG] Server.listen callback executed.'); // –õ–æ–≥ 8
        console.log(`üöÄ Backend server started successfully.`);
        console.log(`   Listening on: http://localhost:${PORT}`);
        console.log(`   API Root: http://localhost:${PORT}${API_PREFIX}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–∞–º–æ–≥–æ http —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, EADDRINUSE)
    server.on('error', (error: NodeJS.ErrnoException) => { 
       console.error('[DEBUG] HTTP Server Error:', error);
       if (error.syscall !== 'listen') { throw error; } // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –æ—à–∏–±–∫–∞ listen
       switch (error.code) {
           case 'EACCES':
               console.error(`[FATAL] Port ${PORT} requires elevated privileges`);
               process.exit(1);
               break;
           case 'EADDRINUSE':
               console.error(`[FATAL] Port ${PORT} is already in use`);
               process.exit(1);
               break;
           default:
               throw error;
       }
    });
    //console.log('[DEBUG] Server.listen called, waiting for callback or error...'); // –õ–æ–≥ 9

} catch (listenError: any) {
    console.error('[DEBUG] –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ó–û–í–ï server.listen:', listenError); 
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
const gracefulShutdown = async (signal: string) => {
  console.log(`\nüîå Received ${signal}. Starting graceful shutdown...`);
  console.log("   Closing HTTP server...");
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ server –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º close
  if (server) { 
      server.close(async (err) => {
          if (err) {
              console.error('   [Error] closing server:', err);
              process.exit(1);
          }
          console.log('   ‚úÖ HTTP server closed.');
          try {
              console.log('   Disconnecting Prisma...');
              await prisma.$disconnect(); 
              console.log('   ‚úÖ Prisma connection closed.');
              process.exit(0); 
          } catch (dbErr) {
              console.error('   [Error] disconnecting Prisma:', dbErr);
              process.exit(1);
          }
      });
  } else {
      console.warn("   Server was not initialized, exiting directly.");
      process.exit(0);
  }

  setTimeout(() => {
    console.error('   [Timeout] Could not close connections in time, forcing shutdown.');
    process.exit(1);
  }, 15000); 
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => gracefulShutdown('SIGINT')); 
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); 

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('uncaughtException', (error, origin) => {
  console.error(`\nüí• UNCAUGHT EXCEPTION! Origin: ${origin}`);
  console.error(error);
  console.error('   Shutting down application...');
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ
  process.exit(1); 
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('\nüí• UNHANDLED REJECTION!');
  console.error('   Reason:', reason);
  // console.error('   Promise:', promise); // Promise –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  console.error('   Shutting down application...');
  if (server) {
      server.close(() => { process.exit(1); });
      setTimeout(() => process.exit(1), 2000); 
  } else {
      process.exit(1);
  }
});