import express, { Request, Response, NextFunction } from "express"; // –î–æ–±–∞–≤–∏–ª–∏ —Ç–∏–ø—ã
import http from 'http'; // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
import dotenv from "dotenv";
import cors from "cors";
import helmet from "helmet";
import morgan from "morgan";
import passport from "passport";

import { prisma } from './lib/prisma';

import { configurePassport } from "./config/passport";
import authRoutes from "./routes/authRoutes";
import pixelStepRoutes from "./routes/pixelStepRoutes";
import cabinetRoutes from "./routes/cabinetRoutes";
import screenTypeRoutes from "./routes/screenTypeRoutes";
import protectionRoutes from "./routes/ingressProtection";
import healthcheck from "./routes/healthcheck";


dotenv.config();

const app = express();

// Middleware
app.use(express.json());
app.use(cors()); // –†–∞—Å—Å–º–æ—Ç—Ä–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.use(helmet());
app.use(morgan("dev"));
app.use(passport.initialize());
configurePassport(passport);

// Routes
// Healthcheck –æ–±—ã—á–Ω–æ –º–æ–Ω—Ç–∏—Ä—É—é—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ / –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.use("/", healthcheck);
app.use("/auth", authRoutes);
app.use("/screen-types", screenTypeRoutes);
app.use("/pixel-steps", pixelStepRoutes);
app.use("/protection", protectionRoutes);
app.use("/cabinets", cabinetRoutes);


// --- –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
// –î–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error("Unhandled Error:", err.stack || err); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∫–ª–∏–µ–Ω—Ç—É
  res.status(500).json({ message: "Internal Server Error" });
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Graceful Shutdown ---
const PORT = process.env.PORT || 5000;

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app).listen(PORT, () => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º http.createServer
  console.log(`üöÄ Backend server is running on http://localhost:${PORT}`);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
const gracefulShutdown = async (signal: string) => { // –°–¥–µ–ª–∞–ª–∏ async –¥–ª—è await prisma.$disconnect()
  console.log(`\nReceived ${signal}. Closing HTTP server...`);
  server.close(async (err) => { // –î–æ–±–∞–≤–∏–ª–∏ async –∏ —Å—é–¥–∞
    if (err) {
      console.error('Error closing server:', err);
      process.exit(1);
    } else {
      console.log('HTTP server closed.');
      try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Prisma –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        await prisma.$disconnect();
        console.log('Prisma connection closed.');
      } catch (dbErr) {
        console.error('Error disconnecting Prisma:', dbErr);
      } finally {
         process.exit(0); // –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
      }
    }
  });

  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  setTimeout(() => {
    console.error('Could not close connections in time, forcefully shutting down');
    process.exit(1);
  }, 15000); // 15 —Å–µ–∫—É–Ω–¥
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => gracefulShutdown('SIGINT')); // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('UNCAUGHT EXCEPTION! üí• Shutting down...', error);
  process.exit(1); // –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –ª—É—á—à–µ —Å—Ä–∞–∑—É –ø–∞–¥–∞—Ç—å
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('UNHANDLED REJECTION! üí• Shutting down...', reason);
  process.exit(1); // –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –ª—É—á—à–µ —Å—Ä–∞–∑—É –ø–∞–¥–∞—Ç—å
});