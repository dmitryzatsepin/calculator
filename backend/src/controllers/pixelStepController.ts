import { Request, Response, NextFunction } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤ –ø–∏–∫—Å–µ–ª—è
export const getPixelSteps = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const steps = await prisma.pixelStep.findMany();
        res.status(200).json({ message: "–°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –ø–∏–∫—Å–µ–ª—è", steps });
    } catch (error) {
        next(error); // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤ middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è
export const createPixelStep = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const { name, type, width, height, location, option, brightness, refreshFreq } = req.body;
        if (!type || !name || !width || !height || location ||option  || brightness || refreshFreq === undefined) {
            res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
            return;
        }

        const step = await prisma.pixelStep.create({
            data: { 
                name, 
                type, 
                width, 
                height, 
                location, 
                option,
                brightness, 
                refreshFreq
            },
        });

        res.status(201).json({ message: "–®–∞–≥ –ø–∏–∫—Å–µ–ª—è —Å–æ–∑–¥–∞–Ω", step });
    } catch (error) {
        next(error);
    }
};

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è
export const updatePixelStep = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const { id } = req.params;
        const { name, type, width, height, location, option } = req.body;

        if (!type || !name || !width || !height || location || option === undefined) {
            res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
            return;
        }

        const step = await prisma.pixelStep.update({
            where: { id: Number(id) },
            data: { type, name, width, height, option },
        });

        res.status(200).json({ message: "–®–∞–≥ –ø–∏–∫—Å–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω", step });
    } catch (error) {
        next(error);
    }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è
export const deletePixelStep = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const { id } = req.params;
        await prisma.pixelStep.delete({ where: { id: Number(id) } });

        res.status(200).json({ message: "–®–∞–≥ –ø–∏–∫—Å–µ–ª—è —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        next(error);
    }
};