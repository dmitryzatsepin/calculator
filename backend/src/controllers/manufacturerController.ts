// src/controllers/manufacturerController.ts
import { Request, Response, NextFunction } from "express";
import { PrismaClient, Prisma } from "@prisma/client";
import { prisma } from "../lib/prisma";
import { asyncHandler } from "../middleware/asyncHandler";
import { idParamSchema } from "../validators/commonValidators"; // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
import {
  createManufacturerSchema,
  updateManufacturerSchema,
} from "../validators/manufacturerValidators"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
export const getManufacturers = asyncHandler(async (req: Request, res: Response) => {
  const manufacturers = await prisma.manufacturer.findMany({
    orderBy: { name: "asc" }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  });
  res
    .status(200)
    .json({ message: "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", data: manufacturers });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID
export const getManufacturerById = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params); // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º ID
    try {
      const manufacturer = await prisma.manufacturer.findUniqueOrThrow({
        where: { id },
      });
      res.status(200).json({ message: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω", data: manufacturer });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2025") {
        res.status(404);
        return next(new Error(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      }
      return next(e);
    }
  }
);

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
export const createManufacturer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const validatedData = createManufacturerSchema.parse(req.body);
    const { code, name } = validatedData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ 'code' –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const existingManufacturer = await prisma.manufacturer.findUnique({
      where: { code: code },
      select: { id: true },
    });
    if (existingManufacturer) {
      res.status(409); // Conflict
      return next(
        new Error(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`)
      );
    }

    try {
      const newManufacturer = await prisma.manufacturer.create({
        data: {
          code: code,
          name: name,
        },
      });
      res
        .status(201)
        .json({ message: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", data: newManufacturer });
    } catch (e: any) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (P2002), –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2002") {
        res.status(409);
        return next(
          new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –ö–æ–¥ '${code}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
        );
      }
      return next(e);
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
export const updateManufacturer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    const validatedData = updateManufacturerSchema.parse(req.body);
    const { code, name } = validatedData; // –ú–æ–≥—É—Ç –±—ã—Ç—å undefined

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º .refine()

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 'code', –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (code) {
      const existingManufacturer = await prisma.manufacturer.findUnique({
        where: { code: code },
        select: { id: true },
      });
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ –ù–ï —Ç–µ–∫—É—â–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π
      if (existingManufacturer && existingManufacturer.id !== id) {
        res.status(409); // Conflict
        return next(
          new Error(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`)
        );
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    const dataToUpdate: Prisma.ManufacturerUpdateInput = {};
    if (code !== undefined) dataToUpdate.code = code;
    if (name !== undefined) dataToUpdate.name = name;

    try {
      const updatedManufacturer = await prisma.manufacturer.update({
        where: { id },
        data: dataToUpdate,
      });
      res
        .status(200)
        .json({ message: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", data: updatedManufacturer });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === "P2025") { // RecordNotFound
          res.status(404);
          return next(new Error(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        } else if (e.code === "P2002") { // Unique constraint violation (–¥–ª—è code)
          res.status(409);
          return next(
            new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è ID ${id}. –ö–æ–¥ '${code}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
          );
        }
      }
      return next(e);
    }
  }
);

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
export const deleteManufacturer = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
      const manufacturerExists = await prisma.manufacturer.findUnique({
        where: { id },
        select: { id: true, code: true, name: true }, // –ü–æ–ª—É—á–∞–µ–º code/name –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      });
      if (!manufacturerExists) {
        res.status(404);
        return next(new Error(`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤ –º–æ–¥–µ–ª–∏ Module?
      // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç onDelete –≤ —Å–≤—è–∑–∏ Module -> Manufacturer (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Restrict)
      const relatedModulesCount = await prisma.module.count({
        where: { manufacturerCode: manufacturerExists.code }, // –ò—â–µ–º –º–æ–¥—É–ª–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ code –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
      });

      if (relatedModulesCount > 0) {
        res.status(409); // Conflict (–∏–∑-–∑–∞ Restrict)
        const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '${manufacturerExists.name}' (Code: ${manufacturerExists.code}, ID: ${id}), —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${relatedModulesCount} –º–æ–¥—É–ª—è—Ö.`;
        console.warn(message);
        return next(new Error(message));
      }

      // 3. –£–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç
      await prisma.manufacturer.delete({ where: { id } });
      res.status(200).json({ message: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });

    } catch (e: any) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è ID ${id}:`, e);
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
          if (e.code === "P2025") { // RecordNotFound (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
              res.status(404);
              return next(
                  new Error(
                      `–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`
                  )
              );
          } else if (e.code === "P2003") { // Foreign key constraint failed (Restrict)
             res.status(409);
             return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö.`));
          }
      }
      return next(e);
    }
  }
);