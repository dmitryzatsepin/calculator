import { Request, Response, NextFunction } from "express";
import { PrismaClient, Prisma } from "@prisma/client"; // Prisma –∏ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
import { Decimal } from "@prisma/client/runtime/library"; // –î–ª—è Decimal
import { prisma } from "../lib/prisma"; // –≠–∫–∑–µ–º–ø–ª—è—Ä Prisma
import { asyncHandler } from "../middleware/asyncHandler"; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ async
import { idParamSchema } from "../validators/commonValidators"; // –í–∞–ª–∏–¥–∞—Ç–æ—Ä ID
import {
  // –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –¥–ª—è PixelStepDefinition
  createPixelStepDefinitionSchema,
  updatePixelStepDefinitionSchema,
} from "../validators/pixelStepDefinitionValidators"; // –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã PixelStepDefinition

// –£–î–ê–õ–ï–ù–û: –•–µ–ª–ø–µ—Ä mapPixelStepModelToResponse - –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è PixelStepDefinition

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition)
// –ò–ó–ú–ï–ù–ï–ù–û: getPixelSteps -> getPixelStepDefinitions
export const getPixelStepDefinitions = asyncHandler(async (req: Request, res: Response) => {
  // –ò–ó–ú–ï–ù–ï–ù–û: prisma.pixelStepModel -> prisma.pixelStepDefinition
  const definitions = await prisma.pixelStepDefinition.findMany({
    // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É
    orderBy: { code: "asc" },
    // –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ include - –Ω–µ—Ç –ø—Ä—è–º—ã—Ö —Å–≤—è–∑–µ–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  });
  // –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∫–∞–∫ –µ—Å—Ç—å (id, code, stepValue, createdAt, updatedAt)
  res
    .status(200)
    .json({ message: "–°–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è", data: definitions });
});


// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition)
// –ò–ó–ú–ï–ù–ï–ù–û: createPixelStep -> createPixelStepDefinition
export const createPixelStepDefinition = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –¥–ª—è PixelStepDefinition
    const validatedData = createPixelStepDefinitionSchema.parse(req.body);

    // –ò–ó–ú–ï–ù–ï–ù–û: –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–æ–ª—è –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const { code, stepValue } = validatedData;

    // –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—é 'code'
    const existingDefinition = await prisma.pixelStepDefinition.findUnique({
      where: { code: code }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å code
      select: { id: true },
    });
    if (existingDefinition) {
      res.status(409); // Conflict
      // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return next(
        new Error(
          `–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition) —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
        )
      );
    }

    try {
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.pixelStepModel.create -> prisma.pixelStepDefinition.create
      const newDefinition = await prisma.pixelStepDefinition.create({
        data: {
          code: code,
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Decimal - Prisma Client –ø—Ä–∏–Ω–∏–º–∞–µ—Ç number –∏–ª–∏ string
          stepValue: new Prisma.Decimal(stepValue),
          // –£–î–ê–õ–ï–ù–ê –ª–æ–≥–∏–∫–∞ —Å–≤—è–∑–µ–π —Å ScreenType, Option –∏ —Ç.–¥.
        },
        // –£–î–ê–õ–ï–ù include, —Ç.–∫. —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å
      });
      res
        .status(201)
        .json({
          message: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
          data: newDefinition, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        });
    } catch (e: any) {
      // –õ–æ–≤–∏–º –æ—à–∏–±–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (P2002), –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∫–∞—Å–∞—Ç—å—Å—è 'code'
      if (
        e instanceof Prisma.PrismaClientKnownRequestError &&
        e.code === "P2002"
      ) {
        res.status(409);
        // –ò–ó–ú–ï–ù–ï–ù–û: –£—Ç–æ—á–Ω—è–µ–º –æ—à–∏–±–∫—É
        return next(
          new Error(
            `–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PixelStepDefinition. –ü–æ–ª–µ 'code' (${code}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`
          )
        );
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);


// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition)
// –ò–ó–ú–ï–ù–ï–ù–û: updatePixelStep -> updatePixelStepDefinition
export const updatePixelStepDefinition = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è PixelStepDefinition
    const validatedData = updatePixelStepDefinitionSchema.parse(req.body);
    // –ò–ó–ú–ï–ù–ï–ù–û: –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ–ª–µ (–æ–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ stepValue)
    const { stepValue } = validatedData; // code –æ–±—ã—á–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ —Å–¥–µ–ª–∞–Ω–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ .refine()

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ stepValue)
    // –ò–ó–ú–ï–ù–ï–ù–û: –¢–∏–ø Prisma.PixelStepDefinitionUpdateInput
    const dataToUpdate: Prisma.PixelStepDefinitionUpdateInput = {};
    if (stepValue !== undefined) {
      dataToUpdate.stepValue = new Prisma.Decimal(stepValue);
    }
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 'code', –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ create –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ dataToUpdate

    try {
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.pixelStepModel.update -> prisma.pixelStepDefinition.update
      const updatedDefinition = await prisma.pixelStepDefinition.update({
        where: { id },
        data: dataToUpdate,
        // –£–î–ê–õ–ï–ù include
      });
      res
        .status(200)
        .json({
          message: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
          data: updatedDefinition, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === "P2025") { // RecordNotFound
          res.status(404);
          // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          return next(new Error(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`));
        }
        // –û—à–∏–±–∫–∞ P2002 (Unique constraint) –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞, –µ—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º 'code'
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);


// üìå –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition)
// –ò–ó–ú–ï–ù–ï–ù–û: deletePixelStep -> deletePixelStepDefinition
export const deletePixelStepDefinition = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è PixelStepDefinition
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.pixelStepModel -> prisma.pixelStepDefinition
      const definitionExists = await prisma.pixelStepDefinition.findUnique({
        where: { id },
        select: { id: true, code: true }, // –ü–æ–ª—É—á–∞–µ–º 'code' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      });
      if (!definitionExists) {
        res.status(404);
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return next(new Error(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ 'code' —ç—Ç–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ PixelOption –∏–ª–∏ Module?
      // –í–∞–∂–Ω–æ: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤–∏–ª onDelete –≤ —Å–≤—è–∑—è—Ö PixelOption -> PixelStepDefinition –∏ Module -> PixelStepDefinition.
      // –ï—Å–ª–∏ —Ç–∞–º Restrict (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), —Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–æ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
      // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

      const relatedPixelOptionsCount = await prisma.pixelOption.count({
        where: { pixelCode: definitionExists.code }, // –ò—â–µ–º –ø–æ 'code'
      });

      const relatedModulesCount = await prisma.module.count({
        where: { pixelCode: definitionExists.code }, // –ò—â–µ–º –ø–æ 'code'
      });

      // –ò–ó–ú–ï–ù–ï–ù–û: –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const blockingDependencies: string[] = [];
      if (relatedPixelOptionsCount > 0) {
        blockingDependencies.push(`–≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π (${relatedPixelOptionsCount} —à—Ç. –≤ 'PixelOption')`);
      }
      if (relatedModulesCount > 0) {
        blockingDependencies.push(`–º–æ–¥—É–ª–∏ (${relatedModulesCount} —à—Ç. –≤ 'Module')`);
      }

      // 3. –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 409 (—Ç.–∫. onDelete —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ Restrict)
      if (blockingDependencies.length > 0) {
        res.status(409); // Conflict
        const dependencyString = blockingDependencies.join(' –∏ ');
        const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è —Å –∫–æ–¥–æ–º '${definitionExists.code}' (ID ${id}), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${dependencyString}.`;
        console.warn(message); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        return next(new Error(message)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
      }

      // 4. –£–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.pixelStepModel.delete -> prisma.pixelStepDefinition.delete
      await prisma.pixelStepDefinition.delete({ where: { id } });
      res.status(200).json({ message: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ" });

    } catch (e: any) {
      // –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è PixelStepDefinition
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PixelStepDefinition ID ${id}:`, e);
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
          if (e.code === "P2025") { // RecordNotFound (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
              res.status(404);
              // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
              return next(
                  new Error(
                      `–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è (PixelStepDefinition) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`
                  )
              );
          } else if (e.code === "P2003") { // Foreign key constraint failed (—è–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Restrict)
             res.status(409); // Conflict
             return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å PixelStepDefinition —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö (PixelOption –∏–ª–∏ Module).`));
          }
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);