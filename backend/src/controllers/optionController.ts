// src/controllers/optionController.ts
import { Request, Response, NextFunction } from "express";
import { PrismaClient, Prisma } from "@prisma/client";
import { prisma } from "../lib/prisma";
import { asyncHandler } from "../middleware/asyncHandler";
import { idParamSchema } from "../validators/commonValidators";
import {
  createOptionSchema,
  updateOptionSchema,
} from "../validators/optionValidators"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã Option

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
export const getOptions = asyncHandler(async (req: Request, res: Response) => {
  const options = await prisma.option.findMany({
    orderBy: { name: "asc" }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  });
  res
    .status(200)
    .json({ message: "–°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π", data: options });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –æ–ø—Ü–∏–∏ –ø–æ ID
export const getOptionById = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    try {
      const option = await prisma.option.findUniqueOrThrow({
        where: { id },
      });
      res.status(200).json({ message: "–û–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞", data: option });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2025") {
        res.status(404);
        return next(new Error(`–û–ø—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`));
      }
      return next(e);
    }
  }
);

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
export const createOption = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const validatedData = createOptionSchema.parse(req.body);
    const { code, name } = validatedData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ 'code' –∏ 'name' –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å OR –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const existingOption = await prisma.option.findFirst({
      where: {
        OR: [
          { code: code },
          { name: name }
        ]
      },
      select: { code: true, name: true }, // –ü–æ–ª—É—á–∞–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Å–æ–≤–ø–∞–ª–æ
    });

    if (existingOption) {
      res.status(409); // Conflict
      if (existingOption.code === code) {
        return next(new Error(`–û–ø—Ü–∏—è —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
      } else { // existingOption.name === name
        return next(new Error(`–û–ø—Ü–∏—è —Å –∏–º–µ–Ω–µ–º '${name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
      }
    }

    try {
      const newOption = await prisma.option.create({
        data: {
          code: code,
          name: name,
        },
      });
      res
        .status(201)
        .json({ message: "–û–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", data: newOption });
    } catch (e: any) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (P2002), –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2002") {
        res.status(409);
        // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É, –º–æ–∂–Ω–æ –ø–æ e.meta.target
        const target = (e.meta?.target as string[])?.join(', ') ?? 'code –∏–ª–∏ name';
        return next(
          new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ü–∏–∏. –ü–æ–ª–µ '${target}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
        );
      }
      return next(e);
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏
export const updateOption = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    const validatedData = updateOptionSchema.parse(req.body);
    const { code, name } = validatedData; // –ú–æ–≥—É—Ç –±—ã—Ç—å undefined

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ —Å–¥–µ–ª–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º .refine()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø–æ–ª—è code –∏–ª–∏ name –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (code || name) {
        const conflictingFields: { code?: string; name?: string } = {};
        if (code) conflictingFields.code = code;
        if (name) conflictingFields.name = name;

        const existingOption = await prisma.option.findFirst({
            where: {
                OR: [
                    ...(code ? [{ code: code }] : []), // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ code –µ—Å—Ç—å
                    ...(name ? [{ name: name }] : [])  // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ name –µ—Å—Ç—å
                ],
                NOT: { id: id } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            },
            select: { id: true, code: true, name: true }
        });

        if (existingOption) {
             res.status(409); // Conflict
             if (code && existingOption.code === code) {
                 return next(new Error(`–û–ø—Ü–∏—è —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
             }
             if (name && existingOption.name === name) {
                 return next(new Error(`–û–ø—Ü–∏—è —Å –∏–º–µ–Ω–µ–º '${name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
             }
             // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏–∑-–∑–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—è, –Ω–æ –æ—à–∏–±–∫–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—Å—Ç—å
             return next(new Error(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–µ–π code –∏–ª–∏ name –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏.`));
        }
    }


    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    const dataToUpdate: Prisma.OptionUpdateInput = {};
    if (code !== undefined) dataToUpdate.code = code;
    if (name !== undefined) dataToUpdate.name = name;

    try {
      const updatedOption = await prisma.option.update({
        where: { id },
        data: dataToUpdate,
      });
      res
        .status(200)
        .json({ message: "–û–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", data: updatedOption });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === "P2025") { // RecordNotFound
          res.status(404);
          return next(new Error(`–û–ø—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`));
        } else if (e.code === "P2002") { // Unique constraint violation
          res.status(409);
          const target = (e.meta?.target as string[])?.join(', ') ?? 'code –∏–ª–∏ name';
          return next(
            new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏ ID ${id}. –ü–æ–ª–µ '${target}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
          );
        }
      }
      return next(e);
    }
  }
);

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏
export const deleteOption = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ü–∏–∏
      const optionExists = await prisma.option.findUnique({
        where: { id },
        select: { id: true, name: true }, // –ü–æ–ª—É—á–∞–µ–º name –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      });
      if (!optionExists) {
        res.status(404);
        return next(new Error(`–û–ø—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      //    –∞) –°–≤—è–∑—å —Å ScreenType —á–µ—Ä–µ–∑ ScreenTypeOption (—Ç–∞–º onDelete: Cascade)
      //    –±) –ù–µ—è–≤–Ω–∞—è —Å–≤—è–∑—å —Å PixelOption —á–µ—Ä–µ–∑ –ø–æ–ª–µ PixelOption.optionName
      //       –ò–∑-–∑–∞ –Ω–µ—è–≤–Ω–æ–π —Å–≤—è–∑–∏ Cascade –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é.

      const relatedScreenTypesCount = await prisma.screenTypeOption.count({
          where: { optionId: id },
      });
      // –ï—Å–ª–∏ onDelete: Cascade –≤ ScreenTypeOption, —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

      const relatedPixelOptionsCount = await prisma.pixelOption.count({
          where: { optionName: optionExists.name } // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏!
      });

      const blockingDependencies: string[] = [];
      if (relatedScreenTypesCount > 0) {
          // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç Cascade. –ï—Å–ª–∏ Cascade –µ—Å—Ç—å, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
          console.log(`–û–ø—Ü–∏—è ID ${id} —Å–≤—è–∑–∞–Ω–∞ —Å ${relatedScreenTypesCount} —Ç–∏–ø–∞–º–∏ —ç–∫—Ä–∞–Ω–æ–≤ (—Å–≤—è–∑–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∫–∞—Å–∫–∞–¥–Ω–æ).`);
          // blockingDependencies.push(`—Ç–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤ (${relatedScreenTypesCount} —à—Ç. –≤ ScreenTypeOption)`); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ Cascade
      }
      if (relatedPixelOptionsCount > 0) {
          // –≠—Ç–∞ —Å–≤—è–∑—å –Ω–µ –∫–∞—Å–∫–∞–¥–Ω–∞—è, –ø–æ—ç—Ç–æ–º—É –±–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
          blockingDependencies.push(`–≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π (${relatedPixelOptionsCount} —à—Ç. –≤ PixelOption, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏ '${optionExists.name}')`);
      }


      // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –ë–õ–û–ö–ò–†–£–Æ–©–ò–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∏–∑ PixelOption), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (blockingDependencies.length > 0) {
          res.status(409); // Conflict
          const dependencyString = blockingDependencies.join(' –∏ ');
          const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ü–∏—é '${optionExists.name}' (ID ${id}), —Ç–∞–∫ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ${dependencyString}.`;
          console.warn(message);
          return next(new Error(message));
      }

      // 4. –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ (—Å–≤—è–∑–∏ —Å ScreenType —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
      await prisma.option.delete({ where: { id } });
      res.status(200).json({ message: "–û–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });

    } catch (e: any) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏ ID ${id}:`, e);
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2025") {
          res.status(404);
          return next(new Error(`–û–ø—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`));
      }
      // P2003 –∏–∑-–∑–∞ ScreenTypeOption –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è (Cascade), –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ PixelOption (—Ö–æ—Ç—è –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏)
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2003") {
          res.status(409);
          return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ü–∏—é —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö (–≤–µ—Ä–æ—è—Ç–Ω–æ, PixelOption).`));
      }
      return next(e);
    }
  }
);