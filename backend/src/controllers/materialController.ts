// src/controllers/materialController.ts
import { Request, Response, NextFunction } from "express";
import { PrismaClient, Prisma } from "@prisma/client";
import { prisma } from "../lib/prisma";
import { asyncHandler } from "../middleware/asyncHandler";
import { idParamSchema } from "../validators/commonValidators"; // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
import {
  createMaterialSchema,
  updateMaterialSchema,
} from "../validators/materialValidators"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã Material

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
export const getMaterials = asyncHandler(async (req: Request, res: Response) => {
  const materials = await prisma.material.findMany({
    orderBy: { name: "asc" }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  });
  res
    .status(200)
    .json({ message: "–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", data: materials });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ ID
export const getMaterialById = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params); // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º ID
    try {
      const material = await prisma.material.findUniqueOrThrow({
        where: { id },
      });
      res.status(200).json({ message: "–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω", data: material });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2025") {
        res.status(404);
        return next(new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      }
      return next(e);
    }
  }
);

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const createMaterial = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const validatedData = createMaterialSchema.parse(req.body);
    const { code, name } = validatedData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ 'code' –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const existingMaterial = await prisma.material.findUnique({
      where: { code: code },
      select: { id: true },
    });
    if (existingMaterial) {
      res.status(409); // Conflict
      return next(
        new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`)
      );
    }

    try {
      const newMaterial = await prisma.material.create({
        data: {
          code: code,
          name: name,
        },
      });
      res
        .status(201)
        .json({ message: "–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", data: newMaterial });
    } catch (e: any) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (P2002)
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2002") {
        res.status(409);
        return next(
          new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ö–æ–¥ '${code}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
        );
      }
      return next(e);
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const updateMaterial = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    const validatedData = updateMaterialSchema.parse(req.body);
    const { code, name } = validatedData; // –ú–æ–≥—É—Ç –±—ã—Ç—å undefined

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ —Å–¥–µ–ª–∞–Ω–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º .refine()

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 'code', –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (code) {
      const existingMaterial = await prisma.material.findUnique({
        where: { code: code },
        select: { id: true },
      });
      // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ –ù–ï —Ç–µ–∫—É—â–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π
      if (existingMaterial && existingMaterial.id !== id) {
        res.status(409); // Conflict
        return next(
          new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`)
        );
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    const dataToUpdate: Prisma.MaterialUpdateInput = {};
    if (code !== undefined) dataToUpdate.code = code;
    if (name !== undefined) dataToUpdate.name = name;

    try {
      const updatedMaterial = await prisma.material.update({
        where: { id },
        data: dataToUpdate,
      });
      res
        .status(200)
        .json({ message: "–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", data: updatedMaterial });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === "P2025") { // RecordNotFound
          res.status(404);
          return next(new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        } else if (e.code === "P2002") { // Unique constraint violation (–¥–ª—è code)
          res.status(409);
          return next(
            new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ID ${id}. –ö–æ–¥ '${code}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`)
          );
        }
      }
      return next(e);
    }
  }
);

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const deleteMaterial = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ 404)
      const materialExists = await prisma.material.findUnique({
        where: { id },
        select: { id: true },
      });
      if (!materialExists) {
        res.status(404);
        return next(new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. –µ—Å—Ç—å onDelete: Cascade –≤ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)
      // –í –º–æ–¥–µ–ª—è—Ö ScreenTypeMaterial –∏ CabinetMaterial —Å—Ç–æ–∏—Ç onDelete: Cascade
      // –¥–ª—è —Å–≤—è–∑–∏ —Å Material. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Material,
      // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–∏—Ö —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
      // –ü–æ—ç—Ç–æ–º—É —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ë–î.
      /*
      const relatedScreenTypesCount = await prisma.screenTypeMaterial.count({ where: { materialId: id } });
      const relatedCabinetsCount = await prisma.cabinetMaterial.count({ where: { materialId: id } });
      if (relatedScreenTypesCount > 0 || relatedCabinetsCount > 0) {
          res.status(409); // Conflict
          // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ
          const message = `–ú–∞—Ç–µ—Ä–∏–∞–ª ID ${id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${relatedScreenTypesCount} —Ç–∏–ø–∞—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∏ ${relatedCabinetsCount} –∫–∞–±–∏–Ω–µ—Ç–∞—Ö. –°–≤—è–∑–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∫–∞—Å–∫–∞–¥–Ω–æ.`;
          console.warn(message);
          // return next(new Error(message)); // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ Cascade
      }
      */

      // 3. –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Å–≤—è–∑–∏ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
      await prisma.material.delete({ where: { id } });
      res.status(200).json({ message: "–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });

    } catch (e: any) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ID ${id}:`, e);
      // P2025 –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === "P2025") {
          res.status(404);
          return next(new Error(`–ú–∞—Ç–µ—Ä–∏–∞–ª —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`));
      }
      // P2003 (Foreign key constraint) –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–Ω–∏–∫–∞—Ç—å –∏–∑-–∑–∞ Cascade
      return next(e);
    }
  }
);