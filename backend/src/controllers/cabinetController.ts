import { Request, Response, NextFunction } from "express";
// –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ Part, PixelStepModel. –î–æ–±–∞–≤–∏–ª–∏ –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã.
import { PrismaClient, Prisma, ComponentService, PixelStepDefinition, Cabinet, Material, ScreenType } from '@prisma/client';
import { Decimal } from '@prisma/client/runtime/library';
import { prisma } from '../lib/prisma';
import { asyncHandler } from '../middleware/asyncHandler';
import { idParamSchema } from '../validators/commonValidators';
// TODO: –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã cabinetValidators –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
import { createCabinetSchema, updateCabinetSchema } from '../validators/cabinetValidators';

// --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É–ª—É—á—à–µ–Ω–æ –¥–ª—è mapCabinetToResponse) ---

interface ComponentDetail {
    componentId: number; // –ë—ã–ª–æ partId
    code: string;        // –î–æ–±–∞–≤–∏–ª–∏ code –∏–∑ ComponentService
    name: string;        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –ø–æ–ª–µ name –∏–∑ ComponentService
    quantity: number;
    priceUsd: Decimal | null;
    priceRub: Decimal | null;
    category?: string | null; // –î–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
}

// –£–î–ê–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å CompatiblePixelStepDetail, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∏ Cabinet <-> PixelStepDefinition –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ

interface CabinetComponentRelation {
    quantity: number;
    // –ò–ó–ú–ï–ù–ï–ù–û: –°–≤—è–∑—å —Å ComponentService (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ component)
    component: {
        id: number;
        code: string;
        name: string;
        priceUsd: Decimal | null;
        priceRub: Decimal | null;
        category?: string | null; // –î–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    }
}

// --- –¢–∏–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–∞–±–∏–Ω–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ —á–µ—Ä–µ–∑ Prisma GetPayload ---
type CabinetWithDetails = Prisma.CabinetGetPayload<{
  include: {
    screenType: { select: { name: true } }; // –°–≤—è–∑—å —Å ScreenType (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤ —Å—Ö–µ–º–µ)
    materials: { // –°–≤—è–∑—å M-N CabinetMaterial
        include: {
            material: { select: { code: true, name: true } } // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ Material
        }
    };
    components: { // –°–≤—è–∑—å M-N CabinetComponent
        select: {
            quantity: true;
            component: { // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ ComponentService
                select: { id: true; code: true; name: true; priceUsd: true; priceRub: true; category: true }
            }
        }
    };
    // –£–î–ê–õ–ï–ù–û: ipCode, compatiblePixelSteps - –Ω–µ—Ç —Ç–∞–∫–∏—Ö —Å–≤—è–∑–µ–π –≤ —Å—Ö–µ–º–µ Cabinet
  }
}>

// --- –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Cabinet –≤ –æ—Ç–≤–µ—Ç API (–ü–ï–†–ï–ü–ò–°–ê–ù –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É) ---
const mapCabinetToResponse = (cabinet: CabinetWithDetails | null) => {
    if (!cabinet) return null;
    const {
        screenType, materials, components,
        priceUsd, // –ë–µ—Ä–µ–º –∏–∑ —Å–∞–º–æ–π –º–æ–¥–µ–ª–∏ Cabinet
        // –£–î–ê–õ–ï–ù–û: mountPriceRub, deliveryPriceRub, addPriceRub - –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Cabinet
        // –£–î–ê–õ–ï–ù–û: compatiblePixelSteps, ipCode
        ...rest // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Cabinet (id, sku, name, width, height, etc.)
    } = cabinet;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —Å–≤—è–∑–∏ M-N
    const materialCodes: string[] = materials?.map(cm => cm.material.code) ?? [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Å–≤—è–∑–∏ M-N
    const componentDetails: ComponentDetail[] = components?.map((comp): ComponentDetail => ({
        componentId: comp.component.id,
        code: comp.component.code,
        name: comp.component.name,
        quantity: comp.quantity,
        priceUsd: comp.component.priceUsd,
        priceRub: comp.component.priceRub,
        category: comp.component.category,
    })) ?? [];

    // --- –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å 'placeholder_code_...' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let powerUnitInfo = componentDetails.find((c: ComponentDetail) => c.code?.startsWith('PU')); // –ü—Ä–∏–º–µ—Ä: –ò—â–µ–º –ø–æ –∫–æ–¥—É, –Ω–∞—á–∏–Ω–∞—é—â–µ–º—É—Å—è —Å PU
    let receiverInfo = componentDetails.find((c: ComponentDetail) => c.code === 'placeholder_code_receiver'); // –ü—Ä–∏–º–µ—Ä: –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É –∫–æ–¥—É
    let coolerInfo = componentDetails.find((c: ComponentDetail) => c.category === '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ'); // –ü—Ä–∏–º–µ—Ä: –ò—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    // --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥–µ–ª–∏ Cabinet –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–µ–π
    return {
        id: rest.id,
        sku: rest.sku,
        name: rest.name,
        placement: rest.placement,
        location: screenType?.name ?? null, // –ò–º—è —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ null
        materialCodes: materialCodes, // –ú–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        pixelStep: [], // –ó–ê–ì–õ–£–®–ö–ê: –ü—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å —à–∞–≥–æ–º –ø–∏–∫—Å–µ–ª—è –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ
        powerUnit: powerUnitInfo?.name ?? 'N/A',
        // powerUnitCapacity: parseInt(powerUnitInfo?.code?.replace('PU', '') || '0'), // –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ–¥–∞
        powerUnitQ: powerUnitInfo?.quantity ?? 0,
        receiverQ: receiverInfo?.quantity ?? 0, // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ receiver -> receiverQ
        coolerQ: coolerInfo?.quantity ?? 0, // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ cooler -> coolerQ
        width: rest.width,
        height: rest.height,
        modulesCount: rest.modulesCount,
        priceUsd: priceUsd, // –¶–µ–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–∏ Cabinet
        // –£–î–ê–õ–ï–ù–û: mountPriceRub, deliveryPriceRub, addPriceRub
        // –£–î–ê–õ–ï–ù–û: ipCode
        createdAt: rest.createdAt,
        updatedAt: rest.updatedAt,
    };
};


// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–ü–ï–†–ï–ü–ò–°–ê–ù–û –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É)
export const getCabinets = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const cabinets = await prisma.cabinet.findMany({ // –ò–ó–ú–ï–ù–ï–ù–û: CabinetConfiguration -> Cabinet
        orderBy: { id: 'asc' },
        include: { // –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º include –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π
            screenType: { select: { name: true } },
            materials: { include: { material: { select: { code: true, name: true } } } },
            components: {
                select: {
                    quantity: true,
                    component: { select: { id: true, code: true, name: true, priceUsd: true, priceRub: true, category: true } }
                }
            }
            // –£–î–ê–õ–ï–ù–û: ipCode, compatiblePixelSteps
        }
    });
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–µ—Ä
    const responseData = cabinets.map(mapCabinetToResponse);
    res.status(200).json({ message: "–°–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤", data: responseData });
});


// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–ü–ï–†–ï–ü–ò–°–ê–ù–û –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É)
export const createCabinet = asyncHandler(async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    // TODO: –û–±–Ω–æ–≤–∏—Ç—å createCabinetSchema –≤ validators! –û–∂–∏–¥–∞–µ–º:
    // sku, name?, width?, height?, modulesCount?, placement?, priceUsd?
    // location? (screenType.name)
    // materialCodes: string[]
    // components: Array<{ componentCode: string, quantity: number }>
    // pixelStepCodes - —É–±—Ä–∞–Ω–æ (–Ω–µ—Ç —Å–≤—è–∑–∏)
    // –£–±—Ä–∞–Ω—ã: powerUnitCapacity, powerUnitQ, receiver, cooler (–ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ components)
    // –£–±—Ä–∞–Ω—ã: mountPriceRub, deliveryPriceRub, addPriceRub (–Ω–µ—Ç –≤ —Å—Ö–µ–º–µ)
    const validatedData = createCabinetSchema.parse(req.body);
    const {
        sku, name, width, height, modulesCount, placement, priceUsd, // –ü–æ–ª—è Cabinet
        location, // –ò–º—è ScreenType
        materialCodes, // –ú–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        components: componentsInput, // –ú–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ { componentCode, quantity }
        // –£–î–ê–õ–ï–ù–û: pixelStep, powerUnitCapacity, powerUnitQ, receiver, cooler, mountPriceRub, deliveryPriceRub, addPriceRub
        ...rest // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    } = validatedData;

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ScreenType (1-n, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    let screenTypeId: number | undefined = undefined;
    if (location) {
        const screenType = await prisma.screenType.findUnique({ where: { name: location }, select: { id: true } });
        if (!screenType) { res.status(400); return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ '${location}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`)); }
        screenTypeId = screenType.id;
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (M-N) ---
    const materialsToConnect: Prisma.CabinetMaterialCreateManyCabinetInput[] = [];
    if (materialCodes && materialCodes.length > 0) {
        const foundMaterials = await prisma.material.findMany({
            where: { code: { in: materialCodes } }, // –ò—â–µ–º –ø–æ –∫–æ–¥—É
            select: { id: true, code: true }
        });
        if (foundMaterials.length !== materialCodes.length) {
            const foundCodes = foundMaterials.map(m => m.code);
            const notFound = materialCodes.filter(code => !foundCodes.includes(code));
            res.status(400); return next(new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${notFound.join(', ')}`));
        }
        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π –≤ CabinetMaterial
        foundMaterials.forEach(m => materialsToConnect.push({ materialId: m.id }));
    } else {
        // –†–µ—à–∏—Ç–µ, –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª. –ï—Å–ª–∏ –¥–∞ - –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É.
        console.warn(`[Create Cabinet ${sku}] –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã.`);
        // res.status(400); return next(new Error(`–ù–µ —É–∫–∞–∑–∞–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–±–∏–Ω–µ—Ç–∞.`));
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PixelSteps (–£–î–ê–õ–ï–ù–û) ---
    // –°–≤—è–∑–∏ Cabinet -> PixelStepDefinition –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ. –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞.
    // –ï—Å–ª–∏ —Å–≤—è–∑—å –Ω—É–∂–Ω–∞, –¥–æ–±–∞–≤—å—Ç–µ M-N —Ç–∞–±–ª–∏—Ü—É –≤ schema.prisma –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥.
    console.warn(`[Create Cabinet ${sku}] –õ–æ–≥–∏–∫–∞ —Å–≤—è–∑–∏ —Å PixelStepDefinition –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç M-N —Å–≤—è–∑–∏ –≤ —Å—Ö–µ–º–µ).`);

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (M-N) ---
    const componentsToCreate: Prisma.CabinetComponentCreateWithoutCabinetInput[] = []; // –ò–ó–ú–ï–ù–ï–ù–û –¢–ò–ü
    if (componentsInput && componentsInput.length > 0) {
        for (const item of componentsInput) {
             // TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É item
             const { componentCode, quantity } = item;
             if (!componentCode || !quantity || quantity <= 0) {
                 console.warn(`(Create Cabinet ${sku}) –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:`, item);
                 continue;
             };
             const componentService = await prisma.componentService.findUnique({ // –ò–ó–ú–ï–ù–ï–ù–û: part -> componentService
                 where: { code: componentCode }, // –ò—â–µ–º –ø–æ –∫–æ–¥—É
                 select: { id: true }
             });
             if (componentService) {
                 // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –≤ CabinetComponent
                 componentsToCreate.push({
                     quantity: quantity,
                     component: { connect: { id: componentService.id } } // –°–≤—è–∑—ã–≤–∞–µ–º —Å ComponentService
                 });
             } else {
                 // –ú–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
                 console.warn(`(Create Cabinet ${sku}) ComponentService —Å code='${componentCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.`);
                 // return next(new Error(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫–æ–¥–æ–º '${componentCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
             }
        }
    }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –ö–∞–±–∏–Ω–µ—Ç–∞ ---
    try {
        const newCabinet = await prisma.cabinet.create({ // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfiguration -> cabinet
            data: {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
                sku, name, width, height, modulesCount, placement,
                priceUsd: priceUsd != null ? new Prisma.Decimal(priceUsd) : null,
                // –°–≤—è–∑—å 1-n —Å ScreenType (–µ—Å–ª–∏ ID –Ω–∞–π–¥–µ–Ω)
                ...(screenTypeId !== undefined && { screenType: { connect: { id: screenTypeId } } }),
                // –í–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π M-N
                materials: { create: materialsToConnect }, // –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ CabinetMaterial
                components: { create: componentsToCreate }  // –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ CabinetComponent
                // –£–î–ê–õ–ï–ù–û: compatiblePixelSteps, ipCode, mountPriceRub, deliveryPriceRub, addPriceRub
            },
            include: { // –í–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                 screenType: { select: { name: true } },
                 materials: { include: { material: { select: { code: true, name: true } } } },
                 components: {
                     select: {
                         quantity: true,
                         component: { select: { id: true, code: true, name: true, priceUsd: true, priceRub: true, category: true } }
                     }
                 }
             }
        });
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const responseData = mapCabinetToResponse(newCabinet);
        res.status(201).json({ message: "–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", data: responseData });
    } catch (e: any) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—É–±–ª–∏–∫–∞—Ç SKU P2002)
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ ${sku}:`, e);
        if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
             return next(new Error(`–ö–∞–±–∏–Ω–µ—Ç —Å SKU '${sku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
        }
        return next(e);
    }
});


// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–ü–ï–†–ï–ü–ò–°–ê–ù–û –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É)
export const updateCabinet = asyncHandler(async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    const { id } = idParamSchema.parse(req.params);
    // TODO: –û–±–Ω–æ–≤–∏—Ç—å updateCabinetSchema –≤ validators! –û–∂–∏–¥–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –≤ create.
    const validatedData = updateCabinetSchema.parse(req.body);
    const {
        sku, name, width, height, modulesCount, placement, priceUsd, // –ü–æ–ª—è Cabinet
        location, // –ò–º—è ScreenType (–∏–ª–∏ null –¥–ª—è –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
        materialCodes, // –ú–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
        components: componentsInput, // –ú–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ { componentCode, quantity } (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
        // –£–î–ê–õ–ï–ù–û: pixelStep, powerUnitCapacity, powerUnitQ, receiver, cooler, mountPriceRub, deliveryPriceRub, addPriceRub
        ...rest
     } = validatedData;


    if (Object.keys(validatedData).length === 0) {
        res.status(400).json({ message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }); return;
    }

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ update (–ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞)
    const cabinetDataToUpdate: Prisma.CabinetUpdateInput = {}; // –ò–ó–ú–ï–ù–ï–ù–û –¢–ò–ü
    if (sku !== undefined) cabinetDataToUpdate.sku = sku;
    if (name !== undefined) cabinetDataToUpdate.name = name;
    if (width !== undefined) cabinetDataToUpdate.width = width;
    if (height !== undefined) cabinetDataToUpdate.height = height;
    if (modulesCount !== undefined) cabinetDataToUpdate.modulesCount = modulesCount;
    if (placement !== undefined) cabinetDataToUpdate.placement = placement;
    if (priceUsd !== undefined) cabinetDataToUpdate.priceUsd = priceUsd != null ? new Prisma.Decimal(priceUsd) : null;
    // –£–î–ê–õ–ï–ù–û: mountPriceRub, deliveryPriceRub, addPriceRub


    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π
        await prisma.$transaction(async (tx) => {

            // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ScreenType (1-n) ---
            if (location !== undefined) { // –ï—Å–ª–∏ –ø–æ–ª–µ location –ø–µ—Ä–µ–¥–∞–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
                if (location === null) {
                     // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º ScreenType
                     cabinetDataToUpdate.screenType = { disconnect: true };
                } else {
                    // –ò—â–µ–º –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–π ScreenType
                    const screenType = await tx.screenType.findUnique({ where: { name: location }, select: { id: true } });
                    if (!screenType) { throw new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ '${location}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`); }
                    cabinetDataToUpdate.screenType = { connect: { id: screenType.id } };
                }
            }

            // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (M-N) —á–µ—Ä–µ–∑ delete/create ---
            if (materialCodes !== undefined) { // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ materialCodes (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ID: ${id}`);
                // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ Cabinet <-> Material
                await tx.cabinetMaterial.deleteMany({
                    where: { cabinetId: id } // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfigurationId -> cabinetId
                });
                console.log(` - –°—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω—ã.`);

                 // 2. –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –∏—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
                if (materialCodes.length > 0) {
                    const foundMaterials = await tx.material.findMany({
                        where: { code: { in: materialCodes } }, // –ò—â–µ–º –ø–æ –∫–æ–¥—É
                        select: { id: true, code: true }
                    });
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã
                    if (foundMaterials.length !== materialCodes.length) {
                        const foundCodes = foundMaterials.map(m => m.code);
                        const notFound = materialCodes.filter(code => !foundCodes.includes(code));
                        throw new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${notFound.join(', ')}`);
                    }
                    // 3. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ CabinetMaterial
                    const materialsToCreate = foundMaterials.map(m => ({ materialId: m.id }));
                    cabinetDataToUpdate.materials = { create: materialsToCreate };
                    console.log(` - –ù–æ–≤—ã–µ —Å–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã: ${materialsToCreate.length} —à—Ç.`);
                } else {
                    // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ–≤—ã–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º
                    console.log(` - –ù–æ–≤—ã—Ö —Å–≤—è–∑–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Ç.`);
                    // Prisma –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ 'materials' –∏–ª–∏ 'create: []' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                }
            }

            // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PixelSteps (–£–î–ê–õ–ï–ù–û) ---
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∏ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ.
            // if (pixelStepCodes !== undefined) {
                 console.warn(`[Update Cabinet ${id}] –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PixelStepDefinition –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç M-N —Å–≤—è–∑–∏ –≤ —Å—Ö–µ–º–µ).`);
            // }


            // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (M-N) —á–µ—Ä–µ–∑ delete/create ---
            if (componentsInput !== undefined) { // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ componentsInput (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ID: ${id}`);
                const newComponentsToCreate: Prisma.CabinetComponentCreateWithoutCabinetInput[] = []; // –ò–ó–ú–ï–ù–ï–ù–û –¢–ò–ü

                // 1. –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–≤—è–∑–∏
                 if (componentsInput.length > 0) {
                     for (const item of componentsInput) {
                         const { componentCode, quantity } = item;
                         if (!componentCode || !quantity || quantity <= 0) {
                            console.warn(`(Update Cabinet ${id}) –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:`, item);
                            continue;
                         };
                         const componentService = await tx.componentService.findUnique({ // –ò–ó–ú–ï–ù–ï–ù–û: part -> componentService
                             where: { code: componentCode }, // –ò—â–µ–º –ø–æ –∫–æ–¥—É
                             select: { id: true }
                         });
                         if (componentService) {
                             newComponentsToCreate.push({
                                 quantity: quantity,
                                 component: { connect: { id: componentService.id } } // –ò–ó–ú–ï–ù–ï–ù–û: part -> component
                             });
                         } else {
                             // –ú–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É
                             console.warn(`(Update Cabinet ${id}) ComponentService —Å code='${componentCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.`);
                             // throw new Error(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫–æ–¥–æ–º '${componentCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                         }
                     }
                }

                // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ Cabinet <-> Component
                await tx.cabinetComponent.deleteMany({
                    where: { cabinetId: id } // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfigurationId -> cabinetId
                });
                console.log(` - –°—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.`);

                // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
                if (newComponentsToCreate.length > 0) {
                    cabinetDataToUpdate.components = { create: newComponentsToCreate };
                    console.log(` - –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã: ${newComponentsToCreate.length} —à—Ç.`);
                } else {
                     console.log(` - –ù–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Ç.`);
                }
           }

            // --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cabinet ---
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å (–ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –∏–ª–∏ —Å–≤—è–∑–∏)
            if (Object.keys(cabinetDataToUpdate).length > 0) {
                 await tx.cabinet.update({ // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfiguration -> cabinet
                     where: { id },
                     data: cabinetDataToUpdate
                 });
                 console.log(` - –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å Cabinet ID ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
             } else {
                 console.log(` - –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å Cabinet ID ${id} –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`);
             }

        }); // –ö–æ–Ω–µ—Ü —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        // --- –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
        const updatedCabinet = await prisma.cabinet.findUnique({ // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfiguration -> cabinet
            where: { id },
            include: { // –í–∫–ª—é—á–∞–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ –≤ getCabinets
                 screenType: { select: { name: true } },
                 materials: { include: { material: { select: { code: true, name: true } } } },
                 components: {
                     select: {
                         quantity: true,
                         component: { select: { id: true, code: true, name: true, priceUsd: true, priceRub: true, category: true } }
                     }
                 }
             }
        });
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–µ—Ä
        const responseData = mapCabinetToResponse(updatedCabinet);
        res.status(200).json({ message: "–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", data: responseData });

    } catch (e: any) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (P2025 - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è update, P2002 - –¥—É–±–ª–∏–∫–∞—Ç SKU)
        if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2025') {
            res.status(404); return next(new Error(`–ö–∞–±–∏–Ω–µ—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        }
         if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
             // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å SKU –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
             res.status(409); // Conflict
             return next(new Error(`–ö–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º SKU '${validatedData.sku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
        }
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ ID ${id}:`, e);
        return next(e);
    }
});


// üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–ü–ï–†–ï–ü–ò–°–ê–ù–û –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É)
export const deleteCabinet = asyncHandler(async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    const { id } = idParamSchema.parse(req.params);

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞
        const cabinetExists = await prisma.cabinet.findUnique({ // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfiguration -> cabinet
            where: { id }, select: { id: true } // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ ID
        });

        if (!cabinetExists) {
            res.status(404);
            return next(new Error(`–ö–∞–±–∏–Ω–µ—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û, –µ—Å–ª–∏ onDelete: Cascade –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        // –í –≤–∞—à–µ–π —Å—Ö–µ–º–µ CabinetMaterial –∏ CabinetComponent –∏–º–µ—é—Ç onDelete: Cascade,
        // –ø–æ—ç—Ç–æ–º—É Prisma —É–¥–∞–ª–∏—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Cabinet.
        // –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ Cascade –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.

        /* // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. Cascade –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        const relatedMaterialsCount = await prisma.cabinetMaterial.count({
             where: { cabinetId: id }, // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfigurationId -> cabinetId
        });
        const relatedComponentsCount = await prisma.cabinetComponent.count({
            where: { cabinetId: id }, // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfigurationId -> cabinetId
        });

        const blockingDependencies: string[] = [];
         if (relatedMaterialsCount > 0) {
             blockingDependencies.push(`–º–∞—Ç–µ—Ä–∏–∞–ª—ã (${relatedMaterialsCount} —à—Ç. –≤ 'CabinetMaterial')`);
         }
        if (relatedComponentsCount > 0) {
            blockingDependencies.push(`–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (${relatedComponentsCount} —à—Ç. –≤ 'CabinetComponent')`);
        }

        if (blockingDependencies.length > 0) {
            // –ï—Å–ª–∏ onDelete –ù–ï Cascade, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É 409 Conflict
            res.status(409);
            const dependencyString = blockingDependencies.join(' –∏ ');
            const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ ${dependencyString}. –£–¥–∞–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ.`;
            console.warn(message);
            return next(new Error(message));
        }
        */

        // 3. –£–¥–∞–ª—è–µ–º –∫–∞–±–∏–Ω–µ—Ç
        // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ CabinetMaterial –∏ CabinetComponent –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–∏–∑-–∑–∞ onDelete: Cascade)
        await prisma.cabinet.delete({
            where: { id } // –ò–ó–ú–ï–ù–ï–ù–û: cabinetConfiguration -> cabinet
        });

        res.status(200).json({ message: "–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });

    } catch (e: any) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ ID ${id}:`, e);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2025 (–µ—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç —É–¥–∞–ª–∏–ª–∏ –º–µ–∂–¥—É findUnique –∏ delete)
        if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2025') {
             res.status(404); return next(new Error(`–ö–∞–±–∏–Ω–µ—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`));
        }
         // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2003 (Foreign key constraint failed - –µ—Å–ª–∏ onDelete –ù–ï Cascade –∏–ª–∏ Restrict)
        if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2003') {
             res.status(409); // Conflict
             return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –∑–∞–ø–∏—Å–∏. –£–¥–∞–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–ø–∏—Å–∏.`));
        }
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        return next(e);
    }
});