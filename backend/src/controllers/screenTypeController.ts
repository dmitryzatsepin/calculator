// src/controllers/screenTypeController.ts
import { Request, Response, NextFunction } from "express"; // –î–æ–±–∞–≤–∏–ª–∏ NextFunction
import { PrismaClient, Prisma } from "@prisma/client"; // –î–æ–±–∞–≤–∏–ª–∏ Prisma –¥–ª—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
import { prisma } from '../lib/prisma';
import { asyncHandler } from '../middleware/asyncHandler'; // –û—Å—Ç–∞–≤–ª—è–µ–º
// import { idParamSchema } from "../validators/commonValidators"; // –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ
// import { createScreenTypeSchema, updateScreenTypeSchema } from "../validators/screenTypeValidators"; // –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ (–£–ü–†–û–©–ï–ù–û) ---
// –£–±—Ä–∞–Ω—ã —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ materials –∏ options
const mapScreenTypeToResponse = (screenType: {id: number, code: string, name: string, createdAt: Date, updatedAt: Date } | null) => {
    if (!screenType) return null;
    return {
        id: screenType.id,
        code: screenType.code, // –î–æ–±–∞–≤–∏–ª–∏ code
        name: screenType.name,
        createdAt: screenType.createdAt,
        updatedAt: screenType.updatedAt,
    };
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê) ---
/*
const checkRelatedCodes = async (
    // ... (–∫–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. create/update –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã) ...
) => {
    // ...
};
*/


// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤ (–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–ø–ø–µ—Ä)
export const getAllScreenTypes = asyncHandler(async (req: Request, res: Response) => {
  const screenTypes = await prisma.screenType.findMany({
    orderBy: { name: 'asc' },
    // –£–±—Ä–∞–ª–∏ include –¥–ª—è materials –∏ options, —Ç.–∫. –∏—Ö –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
  });
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ (—Ö–æ—Ç—è –æ–Ω —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ–π)
  const responseData = screenTypes.map(mapScreenTypeToResponse);
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å—Ç—ã–π –º–∞—Å—Å–∏–≤
  res.status(200).json(responseData);
});

// -------------------------------------------------------------------- //
// --- –í–ï–°–¨ –ö–û–î –ù–ò–ñ–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù (getById, create, update, delete) --- //
// -------------------------------------------------------------------- //

/*
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ ID (–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò –ò –ê–î–ê–ü–¢–ê–¶–ò–ò)
export const getScreenTypeById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–µ–Ω
    const { id } = {}; // –ó–∞–≥–ª—É—à–∫–∞ idParamSchema.parse(req.params);
    try {
        const screenType = await prisma.screenType.findUniqueOrThrow({
            where: { id },
            // –£–±—Ä–∞–ª–∏ include
        });
        res.status(200).json({ message: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω", data: mapScreenTypeToResponse(screenType) });
    } catch (e) {
        // ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫) ...
    }
});
*/

/*
// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–¢–†–ï–ë–£–ï–¢ –ü–û–õ–ù–û–ô –ü–ï–†–ï–†–ê–ë–û–¢–ö–ò)
export const createScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    // TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É (code, name) –∏ —Å–≤—è–∑–∏ (locations, pitches)
    // 1. –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä createScreenTypeSchema
    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å code
    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ locationCodes, pitchCodes
    // 4. –û–±–Ω–æ–≤–∏—Ç—å prisma.screenType.create —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º create –¥–ª—è —Å–≤—è–∑–µ–π
    res.status(501).json({ message: "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ" });
});
*/

/*
// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–¢–†–ï–ë–£–ï–¢ –ü–û–õ–ù–û–ô –ü–ï–†–ï–†–ê–ë–û–¢–ö–ò)
export const updateScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    // TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
    // 1. –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä updateScreenTypeSchema
    // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ code, name
    // 3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π M-N (locations, pitches) —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    res.status(501).json({ message: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ" });
});
*/

/*
// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–¢–†–ï–ë–£–ï–¢ –ü–û–õ–ù–û–ô –ü–ï–†–ï–†–ê–ë–û–¢–ö–ò –ü–†–û–í–ï–†–ö–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô)
export const deleteScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    // TODO: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
    // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤—è–∑–∏ –≤ ScreenTypeLocation –∏ ScreenTypePitch
    // (—Ö–æ—Ç—è –æ–Ω–∏ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ) –∏ –≤ Module (–µ—Å–ª–∏ —Å–≤—è–∑—å —Å Module –≤–µ—Ä–Ω–µ—Ç—Å—è)
    res.status(501).json({ message: "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ" });
});
*/