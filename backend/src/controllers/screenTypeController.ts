// src/controllers/screenTypeController.ts
import { Request, Response, NextFunction } from "express"; // –î–æ–±–∞–≤–∏–ª–∏ NextFunction
import { PrismaClient, Prisma } from "@prisma/client"; // –î–æ–±–∞–≤–∏–ª–∏ Prisma –¥–ª—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
import { prisma } from '../lib/prisma';
import { asyncHandler } from '../middleware/asyncHandler';
import { idParamSchema } from "../validators/commonValidators"; // –î–ª—è ID
import {
    createScreenTypeSchema,
    updateScreenTypeSchema
} from "../validators/screenTypeValidators"; // –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è ScreenType

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å) ---
const mapScreenTypeToResponse = (screenType: any) => {
    if (!screenType) return null;

    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ screenType
    const materials = screenType.materials?.map((m: any) => ({
        code: m.material?.code, // –î–æ–±–∞–≤–∏–ª–∏ ?. –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        name: m.material?.name
    })) ?? []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?? [] –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ materials –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    const options = screenType.options?.map((o: any) => ({
        code: o.option?.code, // –î–æ–±–∞–≤–∏–ª–∏ ?. –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        name: o.option?.name
    })) ?? []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?? []

    return {
        id: screenType.id,
        name: screenType.name,
        brightness: screenType.brightness,
        materials: materials,
        options: options,
        createdAt: screenType.createdAt, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º—Å—Ç–µ–º–ø—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        updatedAt: screenType.updatedAt,
    };
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ ---
const checkRelatedCodes = async (
    codes: string[] | undefined,
    model: 'material' | 'option'
): Promise<{ foundIds: number[], notFoundCodes: string[] }> => {
    const foundIds: number[] = [];
    const notFoundCodes: string[] = [];

    if (!codes || codes.length === 0) {
        return { foundIds, notFoundCodes };
    }

    const uniqueCodes = [...new Set(codes)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    let results;
    if (model === 'material') {
        results = await prisma.material.findMany({
            where: { code: { in: uniqueCodes } },
            select: { id: true, code: true },
        });
    } else { // model === 'option'
        results = await prisma.option.findMany({
            where: { code: { in: uniqueCodes } },
            select: { id: true, code: true },
        });
    }

    const foundCodesMap = new Map(results.map(item => [item.code, item.id]));

    for (const code of uniqueCodes) {
        const foundId = foundCodesMap.get(code);
        if (foundId !== undefined) {
            foundIds.push(foundId);
        } else {
            notFoundCodes.push(code);
        }
    }

    return { foundIds, notFoundCodes };
};


// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤ (—É–∂–µ –±—ã–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–µ—Ä)
export const getScreenTypes = asyncHandler(async (req: Request, res: Response) => {
  const screenTypes = await prisma.screenType.findMany({
    orderBy: { name: 'asc' },
    include: {
      materials: { select: { material: { select: { code: true, name: true } } } },
      options:   { select: { option:   { select: { code: true, name: true } } } }
    }
  });
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
  const responseData = screenTypes.map(mapScreenTypeToResponse);
  res.status(200).json({ message: "–°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤", data: responseData });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ ID (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
export const getScreenTypeById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    try {
        const screenType = await prisma.screenType.findUniqueOrThrow({
            where: { id },
            include: { // –í–∫–ª—é—á–∞–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ –≤ getScreenTypes
                materials: { select: { material: { select: { code: true, name: true } } } },
                options:   { select: { option:   { select: { code: true, name: true } } } }
            }
        });
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
        res.status(200).json({ message: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω", data: mapScreenTypeToResponse(screenType) });
    } catch (e) {
        if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2025') {
            res.status(404);
            return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        }
        return next(e);
    }
});

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
export const createScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    const validatedData = createScreenTypeSchema.parse(req.body);
    const { name, brightness, materialCodes, optionCodes } = validatedData;

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
    const existingType = await prisma.screenType.findUnique({ where: { name } });
    if (existingType) {
        res.status(409);
        return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å –∏–º–µ–Ω–µ–º '${name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Material –∏ Option
    const materialCheck = await checkRelatedCodes(materialCodes, 'material');
    if (materialCheck.notFoundCodes.length > 0) {
        res.status(400);
        return next(new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${materialCheck.notFoundCodes.join(', ')}`));
    }
    const optionCheck = await checkRelatedCodes(optionCodes, 'option');
    if (optionCheck.notFoundCodes.length > 0) {
        res.status(400);
        return next(new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${optionCheck.notFoundCodes.join(', ')}`));
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ ScreenType —Å–æ —Å–≤—è–∑—è–º–∏
    try {
        const newScreenType = await prisma.screenType.create({
            data: {
                name,
                brightness, // Prisma –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç undefined –∫–∞–∫ null, –µ—Å–ª–∏ –ø–æ–ª–µ Int?
                // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ M-N —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ create
                materials: materialCheck.foundIds.length > 0 ? {
                    create: materialCheck.foundIds.map(id => ({ materialId: id }))
                } : undefined, // –ù–µ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–≤—è–∑—å, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                options: optionCheck.foundIds.length > 0 ? {
                    create: optionCheck.foundIds.map(id => ({ optionId: id }))
                } : undefined,
            },
            include: { // –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                materials: { select: { material: { select: { code: true, name: true } } } },
                options:   { select: { option:   { select: { code: true, name: true } } } }
            }
        });
        res.status(201).json({ message: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", data: mapScreenTypeToResponse(newScreenType) });
    } catch (e) {
      // –õ–æ–≤–∏–º P2002 –Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
      if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
        res.status(409);
        return next(new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞. –ò–º—è '${name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`));
      }
      // –õ–æ–≤–∏–º P2003 –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å FK
       if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2003') {
         console.error("FK constraint error during ScreenType creation:", e);
         res.status(400);
         return next(new Error(`–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞.`));
       }
      return next(e);
    }
});

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
export const updateScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    const validatedData = updateScreenTypeSchema.parse(req.body);
    const { name, brightness, materialCodes, optionCodes } = validatedData; // –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    if (name) {
        const existingType = await prisma.screenType.findFirst({
            where: { name, NOT: { id } }
        });
        if (existingType) {
            res.status(409);
            return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å –∏–º–µ–Ω–µ–º '${name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`));
        }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Material –∏ Option, –µ—Å–ª–∏ –∫–æ–¥—ã –ø–µ—Ä–µ–¥–∞–Ω—ã
    let materialIds: number[] | undefined;
    if (materialCodes !== undefined) {
        const materialCheck = await checkRelatedCodes(materialCodes, 'material');
        if (materialCheck.notFoundCodes.length > 0) {
            res.status(400);
            return next(new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${materialCheck.notFoundCodes.join(', ')}`));
        }
        materialIds = materialCheck.foundIds;
    }

    let optionIds: number[] | undefined;
     if (optionCodes !== undefined) {
        const optionCheck = await checkRelatedCodes(optionCodes, 'option');
        if (optionCheck.notFoundCodes.length > 0) {
            res.status(400);
            return next(new Error(`–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–¥—ã –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${optionCheck.notFoundCodes.join(', ')}`));
        }
        optionIds = optionCheck.foundIds;
    }

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ScreenType –∏ –µ–≥–æ —Å–≤—è–∑–µ–π
    try {
         // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π M-N
        const updatedScreenType = await prisma.$transaction(async (tx) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const dataToUpdate: Prisma.ScreenTypeUpdateInput = {};
            if (name !== undefined) dataToUpdate.name = name;
            if (brightness !== undefined) dataToUpdate.brightness = brightness; // –ü–æ–∑–≤–æ–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å null

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ M-N (deleteMany + create)
            if (materialIds !== undefined) {
                await tx.screenTypeMaterial.deleteMany({ where: { screenTypeId: id } });
                if (materialIds.length > 0) {
                    dataToUpdate.materials = {
                        create: materialIds.map(matId => ({ materialId: matId }))
                    };
                }
            }
            if (optionIds !== undefined) {
                 await tx.screenTypeOption.deleteMany({ where: { screenTypeId: id } });
                 if (optionIds.length > 0) {
                    dataToUpdate.options = {
                        create: optionIds.map(optId => ({ optionId: optId }))
                    };
                 }
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            return tx.screenType.update({
                where: { id },
                data: dataToUpdate,
                include: { // –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    materials: { select: { material: { select: { code: true, name: true } } } },
                    options:   { select: { option:   { select: { code: true, name: true } } } }
                }
            });
        });

        res.status(200).json({ message: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", data: mapScreenTypeToResponse(updatedScreenType) });
    } catch (e) {
        if (e instanceof Prisma.PrismaClientKnownRequestError) {
            if (e.code === 'P2025') {
                res.status(404);
                return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
            }
            if (e.code === 'P2002') {
                 res.status(409);
                 return next(new Error(`–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞. –ò–º—è '${name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`));
            }
             if (e.code === 'P2003') {
                 console.error("FK constraint error during ScreenType update:", e);
                 res.status(400);
                 return next(new Error(`–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞.`));
            }
        }
        return next(e);
    }
});

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫—Ä–∞–Ω–∞ (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
export const deleteScreenType = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        const screenTypeExists = await prisma.screenType.findUnique({
            where: { id },
            select: { id: true, name: true } // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        });
        if (!screenTypeExists) {
            res.status(404);
            return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Module, Cabinet, PixelOption)
        // –°–≤—è–∑–∏ —Å ScreenTypeMaterial –∏ ScreenTypeOption —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ (onDelete: Cascade)
        const relatedModulesCount = await prisma.module.count({ where: { screenTypeId: id }});
        const relatedCabinetsCount = await prisma.cabinet.count({ where: { screenTypeId: id }});
        const relatedPixelOptionsCount = await prisma.pixelOption.count({ where: { screenTypeId: id }});

        const blockingDependencies: string[] = [];
        if (relatedModulesCount > 0) blockingDependencies.push(`–º–æ–¥—É–ª–∏ (${relatedModulesCount} —à—Ç.)`);
        if (relatedCabinetsCount > 0) blockingDependencies.push(`–∫–∞–±–∏–Ω–µ—Ç—ã (${relatedCabinetsCount} —à—Ç.)`);
        if (relatedPixelOptionsCount > 0) blockingDependencies.push(`–≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π (${relatedPixelOptionsCount} —à—Ç.)`);

        if (blockingDependencies.length > 0) {
            res.status(409); // Conflict
            const dependencyString = blockingDependencies.join(', ');
            const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø —ç–∫—Ä–∞–Ω–∞ '${screenTypeExists.name}' (ID ${id}), —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: ${dependencyString}.`;
            return next(new Error(message));
        }

        // 3. –£–¥–∞–ª–µ–Ω–∏–µ (—Å–≤—è–∑–∏ M-N —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
        // –£–¥–∞–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (—Ö–æ—Ç—è –∑–¥–µ—Å—å —ç—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ)
        await prisma.$transaction(async (tx) => {
             // Prisma —Å–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ScreenTypeMaterial/ScreenTypeOption
             await tx.screenType.delete({ where: { id } });
        });

        res.status(200).json({ message: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });

    } catch (e) {
         if (e instanceof Prisma.PrismaClientKnownRequestError) {
             if (e.code === 'P2025') {
                 res.status(404);
                 return next(new Error(`–¢–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`));
             }
             // P2003 –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∏–ª–∏ onDelete –Ω–µ Cascade —Ç–∞–º, –≥–¥–µ –æ–∂–∏–¥–∞–ª–æ—Å—å
             if (e.code === 'P2003') {
                 res.status(409);
                 return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø —ç–∫—Ä–∞–Ω–∞ —Å ID ${id} –∏–∑-–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π (Module, Cabinet –∏–ª–∏ PixelOption).`));
             }
         }
        return next(e);
    }
});