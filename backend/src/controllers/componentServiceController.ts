import { Request, Response, NextFunction } from "express";
import { PrismaClient, Prisma } from "@prisma/client"; // Prisma –∏ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
import { Decimal } from "@prisma/client/runtime/library"; // –î–ª—è Decimal
import { prisma } from "../lib/prisma"; // –≠–∫–∑–µ–º–ø–ª—è—Ä Prisma
import { asyncHandler } from "../middleware/asyncHandler"; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ async
import { idParamSchema } from "../validators/commonValidators"; // –í–∞–ª–∏–¥–∞—Ç–æ—Ä ID
import {
  // –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –¥–ª—è ComponentService
  createComponentServiceSchema,
  updateComponentServiceSchema,
} from "../validators/componentServiceValidators"; // –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ComponentService

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö/—É—Å–ª—É–≥ (ComponentService)
// –ò–ó–ú–ï–ù–ï–ù–û: getParts -> getComponentServices
export const getComponentServices = asyncHandler(async (req: Request, res: Response) => {
  // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part -> prisma.componentService
  const componentServices = await prisma.componentService.findMany({
    // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–¥—É
    orderBy: { name: "asc" },
  });
  res
    .status(200)
    .json({ message: "–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –∏ —É—Å–ª—É–≥", data: componentServices });
});

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ/—É—Å–ª—É–≥–∏ –ø–æ ID
// –ò–ó–ú–ï–ù–ï–ù–û: getPartById -> getComponentServiceById
export const getComponentServiceById = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    try {
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part -> prisma.componentService
      const componentService = await prisma.componentService.findUniqueOrThrow({
        where: { id },
      });
      // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ
      res.status(200).json({ message: "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–æ", data: componentService });
    } catch (e: any) {
      if (
        e instanceof Prisma.PrismaClientKnownRequestError &&
        e.code === "P2025" // RecordNotFound
      ) {
        res.status(404);
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return next(new Error(`–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`));
      }
      return next(e);
    }
  }
);

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ/—É—Å–ª—É–≥–∏ (ComponentService)
// –ò–ó–ú–ï–ù–ï–ù–û: createPart -> createComponentService
export const createComponentService = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –¥–ª—è ComponentService
    const validatedData = createComponentServiceSchema.parse(req.body);

    // –ò–ó–ú–ï–ù–ï–ù–û: –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–æ–ª—è –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    const { category, code, name, priceUsd, priceRub } = validatedData;

    // –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—é 'code'
    const existingComponent = await prisma.componentService.findUnique({
      where: { code: code }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å code
      select: { id: true }, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID
    });
    if (existingComponent) {
      res.status(409); // Conflict
      // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return next(
        new Error(
          `–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
        )
      );
    }

    try {
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part.create -> prisma.componentService.create
      const newComponentService = await prisma.componentService.create({
        data: {
          // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–∑ validatedData
          category: category, // –ú–æ–∂–µ—Ç –±—ã—Ç—å undefined, Prisma –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç.–∫. String?)
          code: code,
          name: name,
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Decimal? - Prisma Client –ø—Ä–∏–Ω–∏–º–∞–µ—Ç number/string/null
          priceUsd:
            priceUsd !== undefined && priceUsd !== null
              ? new Prisma.Decimal(priceUsd)
              : null,
          priceRub:
            priceRub !== undefined && priceRub !== null
              ? new Prisma.Decimal(priceRub)
              : null,
        },
      });
      res
        .status(201)
        .json({
          message: "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
          data: newComponentService, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        });
    } catch (e: any) {
      // –õ–æ–≤–∏–º –æ—à–∏–±–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (P2002), –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∫–∞—Å–∞—Ç—å—Å—è 'code'
      if (
        e instanceof Prisma.PrismaClientKnownRequestError &&
        e.code === "P2002"
      ) {
        res.status(409);
        // –ò–ó–ú–ï–ù–ï–ù–û: –£—Ç–æ—á–Ω—è–µ–º –æ—à–∏–±–∫—É
        return next(
          new Error(
            `–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ComponentService. –ü–æ–ª–µ 'code' (${code}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`
          )
        );
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ/—É—Å–ª—É–≥–∏ (ComponentService)
// –ò–ó–ú–ï–ù–ï–ù–û: updatePart -> updateComponentService
export const updateComponentService = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ComponentService
    const validatedData = updateComponentServiceSchema.parse(req.body);
    // –ò–ó–ú–ï–ù–ï–ù–û: –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    const { category, code, name, priceUsd, priceRub } = validatedData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ updateComponentServiceSchema —Å –ø–æ–º–æ—â—å—é .refine()

    // –ò–ó–ú–ï–ù–ï–ù–û: –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 'code', –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (code) {
      const existingComponent = await prisma.componentService.findUnique({
        where: { code: code },
        select: { id: true },
      });
      // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ –ù–ï —Ç–µ–∫—É—â–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      if (existingComponent && existingComponent.id !== id) {
        res.status(409); // Conflict
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return next(
          new Error(
            `–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å –∫–æ–¥–æ–º '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
          )
        );
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    // –ò–ó–ú–ï–ù–ï–ù–û: –¢–∏–ø Prisma.ComponentServiceUpdateInput
    const dataToUpdate: Prisma.ComponentServiceUpdateInput = {};
    if (category !== undefined) dataToUpdate.category = category; // –£—á–∏—Ç—ã–≤–∞–µ–º null –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (code !== undefined) dataToUpdate.code = code;
    if (name !== undefined) dataToUpdate.name = name;
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (priceUsd !== undefined)
      dataToUpdate.priceUsd =
        priceUsd !== null ? new Prisma.Decimal(priceUsd) : null;
    if (priceRub !== undefined)
      dataToUpdate.priceRub =
        priceRub !== null ? new Prisma.Decimal(priceRub) : null;

    try {
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part.update -> prisma.componentService.update
      const updatedComponentService = await prisma.componentService.update({
        where: { id },
        data: dataToUpdate,
      });
      res
        .status(200)
        .json({
          message: "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
          data: updatedComponentService, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        });
    } catch (e: any) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === "P2025") { // RecordNotFound
          res.status(404);
          // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          return next(new Error(`–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`));
        } else if (e.code === "P2002") { // Unique constraint violation
          res.status(409);
          // –ò–ó–ú–ï–ù–ï–ù–û: –£—Ç–æ—á–Ω—è–µ–º –æ—à–∏–±–∫—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å 'code')
          return next(
            new Error(
              `–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ComponentService ID ${id}. –ü–æ–ª–µ 'code' (${code}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`
            )
          );
        }
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ/—É—Å–ª—É–≥–∏ (ComponentService)
// –ò–ó–ú–ï–ù–ï–ù–û: deletePart -> deleteComponentService
export const deleteComponentService = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = idParamSchema.parse(req.params);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ComponentService
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part -> prisma.componentService
      const componentExists = await prisma.componentService.findUnique({
        where: { id },
        select: { id: true, name: true }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'name' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      });
      if (!componentExists) {
        res.status(404);
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return next(new Error(`–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≤ CabinetComponent?)
      // –í–ê–ñ–ù–û: –í schema.prisma —É –ø–æ–ª—è CabinetComponent.component —Å—Ç–æ–∏—Ç onDelete: Restrict!
      // –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ Prisma/–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –î–ê–°–¢ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∏.
      // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –î–û –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è.
      const relatedComponentsCount = await prisma.cabinetComponent.count({
        // –ò–ó–ú–ï–ù–ï–ù–û: where: { partId: id } -> where: { componentId: id }
        where: { componentId: id },
      });

      if (relatedComponentsCount > 0) {
        res.status(409); // Conflict
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º componentExists.name
        const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å '${componentExists.name}' (ID ${id}), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${relatedComponentsCount} –∫–∞–±–∏–Ω–µ—Ç–∞—Ö (–≤ –º–æ–¥–µ–ª–∏ 'CabinetComponent'). –ò–∑-–∑–∞ –ø—Ä–∞–≤–∏–ª–∞ 'Restrict' —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.`;
        console.warn(message); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        return next(new Error(message)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
      }

      // 3. –£–¥–∞–ª–µ–Ω–∏–µ (–ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –ø—Ä–æ–π–¥–µ–Ω–∞)
      // –ò–ó–ú–ï–ù–ï–ù–û: prisma.part.delete -> prisma.componentService.delete
      await prisma.componentService.delete({ where: { id } });
      res.status(200).json({ message: "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ" });

    } catch (e: any) {
      // –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è ComponentService
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ComponentService ID ${id}:`, e);
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
          if (e.code === "P2025") { // RecordNotFound (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ)
              res.status(404);
              // –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
              return next(
                  new Error(
                      `–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–µ/—É—Å–ª—É–≥–∞ (ComponentService) —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏).`
                  )
              );
          } else if (e.code === "P2003") { // Foreign key constraint failed (—è–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç onDelete: Restrict)
             res.status(409); // Conflict
             // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º –∏–∑-–∑–∞ —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             return next(new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ComponentService —Å ID ${id}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, CabinetComponent).`));
          }
      }
      return next(e); // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
    }
  }
);