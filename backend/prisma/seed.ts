// src/seed.ts
import { PrismaClient, Prisma } from '@prisma/client';
import * as XLSX from 'xlsx';
import * as path from 'path';
import * as fs from 'fs';
import { Decimal } from '@prisma/client/runtime/library';

const prisma = new PrismaClient();

console.log('--- –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DATABASE_URL:', process.env.DATABASE_URL?.replace(/:(.+?)@/, ':*****@') ?? '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

// --- –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞) ---
function getDataFromSheet(workbook: XLSX.WorkBook, sheetName: string): any[] {
    if (!workbook.SheetNames.includes(sheetName)) {
        console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ. –ü—Ä–æ–ø—É—Å–∫.`);
        return [];
    }
    const sheet = workbook.Sheets[sheetName];
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º header: 1 —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤, —Ç–∞–∫ –ø—Ä–æ—â–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
    const rows: any[][] = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: null });
    if (rows.length < 3) { // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ + 1 —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∏–ª–∏ –º–µ–Ω—å—à–µ 3 —Å—Ç—Ä–æ–∫). –ü—Ä–æ–ø—É—Å–∫.`);
        return [];
    }

    const header = rows[0];
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É (rows[1])
    const dataRows = rows.slice(2);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è null –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const filteredRows = dataRows.filter(row => 
        row.some(cell => cell !== null && cell !== '')
    );

    const jsonData = filteredRows.map(row => {
        const rowData: { [key: string]: any } = {};
        header.forEach((key: any, index: number) => {
            if (key != null) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
               rowData[String(key)] = row[index];
            }
        });
        return rowData;
    });

    if (dataRows.length !== filteredRows.length) {
        console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ ${dataRows.length - filteredRows.length} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ ${sheetName}`);
    }
    console.log(`  - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ ${sheetName} (–ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ 2-–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞): ${jsonData.length}`);
    return jsonData;
}


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function safeDecimal(value: any, context: string): Decimal | null {
    if (value == null || value === '') { return null; }
    const normalizedValue = typeof value === 'string' ? value.replace(',', '.') : value;
    if (typeof normalizedValue === 'number' || (typeof normalizedValue === 'string' && !isNaN(parseFloat(normalizedValue)) && isFinite(Number(normalizedValue)))) {
        try { return new Decimal(normalizedValue); }
        catch (e) { console.error(`‚ùå ${context}: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è '${value}' (–Ω–æ—Ä–º: '${normalizedValue}') –≤ Decimal`, e); return null; }
    } else { console.warn(`‚ö†Ô∏è ${context}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Decimal: '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ null.`); return null; }
}

function safeInt(value: any, context: string, allowZero: boolean = true, allowNull: boolean = true): number | null {
     if (value == null || value === '') { return allowNull ? null : (allowZero ? 0 : null); }
     const trimmedValue = typeof value === 'string' ? String(value).trim() : value; // –î–æ–±–∞–≤–∏–ª–∏ trim –¥–ª—è —Å—Ç—Ä–æ–∫
     const num = Number(trimmedValue);
     if (!isNaN(num) && Number.isInteger(num)) {
         if (!allowZero && num === 0) { console.warn(`‚ö†Ô∏è ${context}: –ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ null.`); return null; }
         return num;
     } else { console.warn(`‚ö†Ô∏è ${context}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${allowNull ? 'null' : (allowZero ? '0' : 'null')}.`); return allowNull ? null : (allowZero ? 0 : null); }
}


// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ ---
async function importDataFromExcel(filePath: string): Promise<void> {
    console.log(`üîç –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    if (!fs.existsSync(filePath)) throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    const workbook = XLSX.readFile(filePath);
    const sheetNames = workbook.SheetNames;
    console.log('üëÄ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:', sheetNames);

    // --- 0. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–û–±–Ω–æ–≤–ª–µ–Ω–æ) ---
    console.log("–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...");
    const screenTypeData = getDataFromSheet(workbook, 'screen_type');
    const locationData = getDataFromSheet(workbook, 'location');
    const materialsData = getDataFromSheet(workbook, 'materials');
    const refreshRateData = getDataFromSheet(workbook, 'refresh_rate');
    const brightnessData = getDataFromSheet(workbook, 'brightness');
    const manufacturersData = getDataFromSheet(workbook, 'manufacturers');
    const cabinetPlacementData = getDataFromSheet(workbook, 'cabinet_placement');
    const pitchData = getDataFromSheet(workbook, 'pitch');
    const pitchTypeData = getDataFromSheet(workbook, 'pitch_type');
    const screenTypeLocationData = getDataFromSheet(workbook, 'screen_type>location');
    const screenTypePitchData = getDataFromSheet(workbook, 'screen_type>pitch');
    const locationMaterialsData = getDataFromSheet(workbook, 'location>materials');
    const locationPitchData = getDataFromSheet(workbook, 'location>pitch');
    const locationCabinetData = getDataFromSheet(workbook, 'location>cabinet');
    const materialCabinetData = getDataFromSheet(workbook, 'material>cabinet');
    const cabinetPlacementCabinetData = getDataFromSheet(workbook, 'cabinet_placement>cabinet');
    const pitchTypePitchData = getDataFromSheet(workbook, 'pitch_type>pitch');
    const modulesData = getDataFromSheet(workbook, 'modules');
    const cabinetsData = getDataFromSheet(workbook, 'cabinets');
    const componentPriceData = getDataFromSheet(workbook, 'component_and_service_price');
    const cabinetComponentsData = getDataFromSheet(workbook, 'cabinet>components');
    const ipProtectionData = getDataFromSheet(workbook, 'ip_protection');
    console.log("–ß—Ç–µ–Ω–∏–µ Excel –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");


    // --- 1. –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü (–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ) ---
    console.log('–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)...');
    try {
        await prisma.cabinetComponent.deleteMany();
        await prisma.pitchTypePitch.deleteMany();
        await prisma.cabinetPlacementCabinet.deleteMany();
        await prisma.materialCabinet.deleteMany();
        await prisma.locationCabinet.deleteMany();
        await prisma.locationPitch.deleteMany();
        await prisma.locationMaterial.deleteMany();
        await prisma.screenTypePitch.deleteMany();
        await prisma.screenTypeLocation.deleteMany();
        await prisma.module.deleteMany();
        await prisma.cabinet.deleteMany();
        await prisma.pitch.deleteMany();
        await prisma.screenType.deleteMany();
        await prisma.pitchType.deleteMany();
        await prisma.cabinetPlacement.deleteMany();
        await prisma.location.deleteMany();
        await prisma.manufacturer.deleteMany();
        await prisma.material.deleteMany();
        await prisma.componentService.deleteMany();
        await prisma.ipProtection.deleteMany();
        await prisma.refreshRate.deleteMany();
        await prisma.brightness.deleteMany();
        console.log('–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch(e) { console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü:", e); throw e; }

    // --- 2. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏ –∫–∞—Ä—Ç (–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å .trim()) ---
    console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç ID...');
    const materialMap = new Map<string, number>();
    const manufacturerCodeMap = new Map<string, number>();
    const manufacturerNameMap = new Map<string, string>(); // name -> code
    const locationMap = new Map<string, number>(); // code -> id
    const locationNameMap = new Map<string, string>(); // name -> code
    const cabinetPlacementMap = new Map<string, number>();
    const pitchTypeMap = new Map<string, number>(); // name -> id
    const screenTypeMap = new Map<string, number>(); // code -> id
    const pitchMap = new Map<string, number>(); // code -> id
    const ipCodeMap = new Map<string, number>();
    const componentCodeMap = new Map<string, number>();
    const cabinetSkuMap = new Map<string, number>(); // sku -> id
    const refreshRateMap = new Map<number, number>();
    const brightnessMap = new Map<number, number>();

    try {
        // --- Material ---
        for (const row of materialsData) {
            const code = row.material_code ? String(row.material_code).trim() : null;
            if (!code) continue;
            if (materialMap.has(code)) { console.warn(`[Material Duplicate] –ö–æ–¥ '${code}'...`); continue; }
            try {
                const created = await prisma.material.create({ data: { code: code, name: String(row.material_name ?? '').trim() } });
                materialMap.set(created.code, created.id);
            } catch(e) { console.error(`[Material Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Material: ${materialMap.size}`);

        // --- Manufacturer ---
        for (const row of manufacturersData) {
            const code = row.manufacturer_code ? String(row.manufacturer_code).trim() : null;
            const name = row.manufacturer_name ? String(row.manufacturer_name).trim() : null;
            if (!code || !name) { console.warn(`[Manufacturer] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code –∏–ª–∏ name`, row); continue; }
             if (manufacturerCodeMap.has(code)) { console.warn(`[Manufacturer Duplicate] –ö–æ–¥ '${code}'...`); continue; }
             if (manufacturerNameMap.has(name)) { console.warn(`[Manufacturer Duplicate] –ò–º—è '${name}'...`); continue; }
            try {
                const created = await prisma.manufacturer.create({ data: { code: code, name: name } });
                manufacturerCodeMap.set(created.code, created.id);
                manufacturerNameMap.set(created.name, created.code);
            } catch(e) { console.error(`[Manufacturer Error] '${code}' / '${name}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Manufacturer: ${manufacturerCodeMap.size}`);

        // --- Location ---
        for (const row of locationData) {
            const code = row.location_code ? String(row.location_code).trim() : null;
            const name = row.location_name ? String(row.location_name).trim() : null;
            if (!code || !name) continue;
             if (locationMap.has(code)) { console.warn(`[Location Duplicate Code] –ö–æ–¥ '${code}'...`); continue; }
             if (locationNameMap.has(name)) { console.warn(`[Location Duplicate Name] –ò–º—è '${name}'...`); continue; }
            try {
                const created = await prisma.location.create({ data: { code: code, name: name } });
                locationMap.set(created.code, created.id);
                locationNameMap.set(created.name, created.code);
            } catch(e) { console.error(`[Location Error] '${code}'/'${name}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Location: ${locationMap.size}`);

        // --- CabinetPlacement ---
        for (const row of cabinetPlacementData) {
            const code = row.cabinet_placement_code ? String(row.cabinet_placement_code).trim() : null;
            if (!code) continue;
             if (cabinetPlacementMap.has(code)) { console.warn(`[CabinetPlacement Duplicate] –ö–æ–¥ '${code}'...`); continue; }
            try {
                const created = await prisma.cabinetPlacement.create({ data: { code: code, name: String(row.cabinet_placement_name ?? '').trim() } });
                cabinetPlacementMap.set(created.code, created.id);
            } catch(e) { console.error(`[CabinetPlacement Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ CabinetPlacement: ${cabinetPlacementMap.size}`);

        // --- PitchType ---
        for (const row of pitchTypeData) {
            const name = row.pitch_type ? String(row.pitch_type).trim() : null;
            if (!name) continue;
             if (pitchTypeMap.has(name)) { console.warn(`[PitchType Duplicate] –ò–º—è '${name}'...`); continue; }
            try {
                const created = await prisma.pitchType.create({ data: { name: name } });
                pitchTypeMap.set(created.name, created.id);
            } catch(e) { console.error(`[PitchType Error] '${name}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ PitchType: ${pitchTypeMap.size}`);

        // --- ScreenType ---
        for (const row of screenTypeData) {
            const code = row.screen_type_code ? String(row.screen_type_code).trim() : null;
            if (!code) continue;
             if (screenTypeMap.has(code)) { console.warn(`[ScreenType Duplicate] –ö–æ–¥ '${code}'...`); continue; }
            try {
                const created = await prisma.screenType.create({ data: { code: code, name: String(row.screen_type ?? '').trim() } });
                screenTypeMap.set(created.code, created.id);
            } catch(e) { console.error(`[ScreenType Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ ScreenType: ${screenTypeMap.size}`);

        // --- Pitch ---
        for (const row of pitchData) {
            const code = row.pitch_code ? String(row.pitch_code).trim() : null;
            if (!code) continue;
             if (pitchMap.has(code)) { console.warn(`[Pitch Duplicate] –ö–æ–¥ '${code}'...`); continue; }
            const pitchVal = safeDecimal(row.pitch, `Pitch ${code} value`);
            const modWidth = safeInt(row.module_width, `Pitch ${code} modWidth`, false, false);
            const modHeight = safeInt(row.module_height, `Pitch ${code} modHeight`, false, false);
            if (pitchVal === null || modWidth === null || modHeight === null) {
                console.warn(`[Pitch] –ü—Ä–æ–ø—É—Å–∫ '${code}': –Ω–µ–≤–µ—Ä–Ω—ã–µ pitch, width –∏–ª–∏ height.`); continue;
            }
            try {
                const created = await prisma.pitch.create({ data: { code, pitchValue: pitchVal, moduleWidth: modWidth, moduleHeight: modHeight } });
                pitchMap.set(created.code, created.id);
            } catch(e) { console.error(`[Pitch Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Pitch: ${pitchMap.size}`);

        // --- RefreshRate ---
        for (const row of refreshRateData) {
            const value = safeInt(row.refresh_rate, `RefreshRate value`, false, true);
            if (value === null) { continue; }
             if (refreshRateMap.has(value)) { continue; }
            try {
                await prisma.refreshRate.upsert({ where: { value: value }, update: {}, create: { value: value } });
                refreshRateMap.set(value, value);
            } catch(e) { console.error(`[RefreshRate Error] '${value}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ/–û–±–Ω–æ–≤–ª–µ–Ω–æ RefreshRate: ${refreshRateMap.size}`);

        // --- Brightness ---
        for (const row of brightnessData) {
            const value = safeInt(row.brightness, `Brightness value`, false, true);
            if (value === null) { continue; }
            if (brightnessMap.has(value)) { continue; }
            try {
                 await prisma.brightness.upsert({ where: { value: value }, update: {}, create: { value: value } });
                brightnessMap.set(value, value);
            } catch(e) { console.error(`[Brightness Error] '${value}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ/–û–±–Ω–æ–≤–ª–µ–Ω–æ Brightness: ${brightnessMap.size}`);

        // --- IpProtection ---
        for (const row of ipProtectionData) {
            const code = row.ip_code ? String(row.ip_code).trim() : null;
            if (!code) continue;
             if (ipCodeMap.has(code)) { console.warn(`[IpProtection Duplicate] –ö–æ–¥ '${code}'...`); continue; }
            try {
                const created = await prisma.ipProtection.create({ data: { code, protectionSolid: String(row.protection_solid ?? '').trim(), protectionWater: String(row.protection_water ?? '').trim() }});
                ipCodeMap.set(created.code, created.id);
            } catch(e) { console.error(`[IpProtection Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ IpProtection: ${ipCodeMap.size}`);

        // --- ComponentService ---
        for (const row of componentPriceData) {
             const code = row.component_code ? String(row.component_code).trim() : null;
             if (!code) continue;
             if (componentCodeMap.has(code)) { console.warn(`[ComponentService Duplicate] –ö–æ–¥ '${code}'...`); continue; }
             const priceUsd = safeDecimal(row.price_usd, `Component ${code} price_usd`);
             const priceRub = safeDecimal(row.price_rub, `Component ${code} price_rub`);
             try {
                 const created = await prisma.componentService.create({ data: {
                     category: row.component_category ? String(row.component_category).trim() : null,
                     code: code, name: String(row.component_name ?? '').trim(), priceUsd: priceUsd, priceRub: priceRub,
                 }});
                 componentCodeMap.set(created.code, created.id);
             } catch(dbError) { console.error(`[ComponentService Error] '${code}'`, dbError); }
         }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ ComponentService: ${componentCodeMap.size}`);

        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');


        // --- 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü (Cabinet, Module) ---
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü...');

        // --- Cabinet ---
        let cabinetsCreatedCount = 0;
        for (const row of cabinetsData) {
            const cabinetSku = row.cabinet_sku ? String(row.cabinet_sku).trim() : null;
            if (!cabinetSku) { console.warn("[Cabinet] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç sku.", row); continue; }
            if (cabinetSkuMap.has(cabinetSku)) { console.warn(`[Cabinet Duplicate] SKU '${cabinetSku}'...`); continue; }
            const priceUsd = safeDecimal(row.price_usd, `Cabinet ${cabinetSku} price_usd`);
            const width = safeInt(row.cabinet_width, `Cabinet ${cabinetSku} width`);
            const height = safeInt(row.cabinet_height, `Cabinet ${cabinetSku} height`);
            const moduleWidth = safeInt(row.module_width, `Cabinet ${cabinetSku} module_width`);
            const moduleHeight = safeInt(row.module_height, `Cabinet ${cabinetSku} module_height`);
            const modulesCount = safeInt(row.modules_count, `Cabinet ${cabinetSku} modules_count`);

            const cabinetData: Prisma.CabinetCreateInput = {
               sku: cabinetSku, name: row.cabinet_name ? String(row.cabinet_name).trim() : null,
               width: width, height: height,
               moduleWidth: moduleWidth, moduleHeight: moduleHeight,
               modulesCount: modulesCount,
               priceUsd: priceUsd,
            };

            try {
                const created = await prisma.cabinet.create({ data: cabinetData });
                cabinetSkuMap.set(created.sku, created.id);
                cabinetsCreatedCount++;
            } catch (e) { console.error(`[Cabinet Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${cabinetSku}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Cabinet: ${cabinetsCreatedCount}`);


        // --- Module ---
        let modulesCreatedCount = 0;
        for (const row of modulesData) {
            const moduleSku = row.module_sku ? String(row.module_sku).trim() : null;
            if (!moduleSku) { console.warn("[Module] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç sku.", row); continue; }

            const locationName = row.location_name ? String(row.location_name).trim() : null;
            const locationCode = locationName ? locationNameMap.get(locationName) : null;

            const manufacturerName = row.manufacturer_name ? String(row.manufacturer_name).trim() : null;
            const manufacturerCode = manufacturerName ? manufacturerNameMap.get(manufacturerName) : null;

            const pitchCode = row.pitch_code ? String(row.pitch_code).trim() : null;
            const refreshRateValue = safeInt(row.refresh_rate, `Module ${moduleSku} refresh_rate`, false, true);
            const brightnessValue = safeInt(row.brightness, `Module ${moduleSku} brightness`, false, true);

            // --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π ---
            if (!locationCode /* && —Å–≤—è–∑—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ */) {
                console.warn(`(Module ${moduleSku}) Location —Å –∏–º–µ–Ω–µ–º '${locationName ?? 'null'}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫/–°–≤—è–∑—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                // continue; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Å–≤—è–∑—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            }
            if (!pitchCode || !pitchMap.has(pitchCode)) {
                console.warn(`(Module ${moduleSku}) Pitch —Å –∫–æ–¥–æ–º '${pitchCode ?? 'null'}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.`); continue;
            }
            if (manufacturerName && !manufacturerCode) { console.warn(`(Module ${moduleSku}) Manufacturer —Å –∏–º–µ–Ω–µ–º '${manufacturerName}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`); }
            if (refreshRateValue !== null && !refreshRateMap.has(refreshRateValue)) { console.warn(`(Module ${moduleSku}) RefreshRate —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '${refreshRateValue}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`); }
            if (brightnessValue !== null && !brightnessMap.has(brightnessValue)) { console.warn(`(Module ${moduleSku}) Brightness —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '${brightnessValue}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`); }

            const priceUsd = safeDecimal(row.price_usd, `Module ${moduleSku} price_usd`);

            const moduleData: Prisma.ModuleCreateInput = {
                 sku: moduleSku,
                 type: row.module_type ? String(row.module_type).trim() : null,
                 priceUsd: priceUsd,
                 ...(locationCode && { location: { connect: { code: locationCode } } }),
                 pitch:      { connect: { code: pitchCode } },
                 ...(manufacturerCode && { manufacturer: { connect: { code: manufacturerCode } } }),
                 ...(refreshRateValue !== null && refreshRateMap.has(refreshRateValue) && { refreshRate: { connect: { value: refreshRateValue } } }),
                 ...(brightnessValue !== null && brightnessMap.has(brightnessValue) && { brightness: { connect: { value: brightnessValue } } }),
             };

            try {
                 await prisma.module.create({ data: moduleData });
                 modulesCreatedCount++;
            } catch (e) {
                 if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
                     console.warn(`[Module Warn] –ú–æ–¥—É–ª—å SKU '${moduleSku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫.`);
                 } else { console.error(`[Module Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${moduleSku}'`, e); }
            }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Module: ${modulesCreatedCount}`);
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');


        // --- 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü (–î–æ–±–∞–≤–ª–µ–Ω .trim()) ---
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
        // ScreenTypeLocation
        for (const row of screenTypeLocationData) {
            const stCode = row.screen_type_code ? String(row.screen_type_code).trim() : null;
            const locCode = row.location_code ? String(row.location_code).trim() : null;
            if (stCode && locCode && screenTypeMap.has(stCode) && locationMap.has(locCode)) {
                try { await prisma.screenTypeLocation.create({ data: { screenTypeCode: stCode, locationCode: locCode } }); }
                catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[ScreenTypeLocation Error]", row, e); }
            } else { console.warn(`[ScreenTypeLocation] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ScreenType ('${stCode}') –∏–ª–∏ Location ('${locCode}')`, row); }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ScreenTypeLocation`);

        // ScreenTypePitch
         for (const row of screenTypePitchData) {
             const stCode = row.screen_type_code ? String(row.screen_type_code).trim() : null;
             const pCode = row.pitch_code ? String(row.pitch_code).trim() : null;
             if (stCode && pCode && screenTypeMap.has(stCode) && pitchMap.has(pCode)) {
                 try { await prisma.screenTypePitch.create({ data: { screenTypeCode: stCode, pitchCode: pCode } }); }
                 catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[ScreenTypePitch Error]", row, e); }
             } else { console.warn(`[ScreenTypePitch] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ScreenType ('${stCode}') –∏–ª–∏ Pitch ('${pCode}')`, row); }
         }
         console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ ScreenTypePitch`);

        // LocationMaterial
         for (const row of locationMaterialsData) {
             const locCode = row.location_code ? String(row.location_code).trim() : null;
             const matCode = row.material_code ? String(row.material_code).trim() : null;
             if (locCode && matCode && locationMap.has(locCode) && materialMap.has(matCode)) {
                 try { await prisma.locationMaterial.create({ data: { locationCode: locCode, materialCode: matCode } }); }
                 catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[LocationMaterial Error]", row, e); }
             } else { console.warn(`[LocationMaterial] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Location ('${locCode}') –∏–ª–∏ Material ('${matCode}')`, row); }
         }
         console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ LocationMaterial`);

        // LocationPitch
        for (const row of locationPitchData) {
            const locCode = row.location_code ? String(row.location_code).trim() : null;
            const pCode = row.pitch_code ? String(row.pitch_code).trim() : null;
            if (locCode && pCode && locationMap.has(locCode) && pitchMap.has(pCode)) {
                try { await prisma.locationPitch.create({ data: { locationCode: locCode, pitchCode: pCode } }); }
                catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[LocationPitch Error]", row, e); }
            } else { console.warn(`[LocationPitch] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Location ('${locCode}') –∏–ª–∏ Pitch ('${pCode}')`, row); }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ LocationPitch`);

        // LocationCabinet
        let emptyRowsCount = 0;
        for (const row of locationCabinetData) {
            const locCode = row.location_code ? String(row.location_code).trim() : null;
            const cabSku = row.cabinet_sku ? String(row.cabinet_sku).trim() : null;
            if (!locCode || !cabSku) {
                emptyRowsCount++;
                continue;
            }
            if (locationMap.has(locCode) && cabinetSkuMap.has(cabSku)) {
                try { await prisma.locationCabinet.create({ data: { locationCode: locCode, cabinetSku: cabSku } }); }
                catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[LocationCabinet Error]", row, e); }
            } else { console.warn(`[LocationCabinet] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Location ('${locCode}') –∏–ª–∏ Cabinet ('${cabSku}')`, row); }
        }
        if (emptyRowsCount > 0) {
            console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ ${emptyRowsCount} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ LocationCabinet`);
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ LocationCabinet`);

        // MaterialCabinet
        for (const row of materialCabinetData) {
            const matCode = row.material_code ? String(row.material_code).trim() : null;
            const cabSku = row.cabinet_sku ? String(row.cabinet_sku).trim() : null;
            
            if (!matCode || !cabSku) {
                console.warn(`[MaterialCabinet] –ü—Ä–æ–ø—É—Å–∫: –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è matCode='${matCode}', cabSku='${cabSku}'`, row);
                continue;
            }
            
            const hasMaterial = materialMap.has(matCode);
            const hasCabinet = cabinetSkuMap.has(cabSku);
            
            if (!hasMaterial || !hasCabinet) {
                console.warn(`[MaterialCabinet] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Material (${matCode}, exists=${hasMaterial}) –∏–ª–∏ Cabinet (${cabSku}, exists=${hasCabinet})`);
                if (!hasMaterial) {
                    console.warn(`  - –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:`, Array.from(materialMap.keys()));
                }
                if (!hasCabinet) {
                    console.warn(`  - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã:`, Array.from(cabinetSkuMap.keys()));
                }
                continue;
            }
            
            try {
                await prisma.materialCabinet.create({ data: { materialCode: matCode, cabinetSku: cabSku } });
            } catch(e) {
                if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) {
                    console.error("[MaterialCabinet Error]", row, e);
                }
            }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ MaterialCabinet`);

        // CabinetPlacementCabinet
        for (const row of cabinetPlacementCabinetData) {
            const placeCode = row.cabinet_placement_code ? String(row.cabinet_placement_code).trim() : null;
            const cabSku = row.cabinet_sku ? String(row.cabinet_sku).trim() : null;
            if (placeCode && cabSku && cabinetPlacementMap.has(placeCode) && cabinetSkuMap.has(cabSku)) {
                try { await prisma.cabinetPlacementCabinet.create({ data: { cabinetPlacementCode: placeCode, cabinetSku: cabSku } }); }
                catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[CabinetPlacementCabinet Error]", row, e); }
            } else { console.warn(`[CabinetPlacementCabinet] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã Placement ('${placeCode}') –∏–ª–∏ Cabinet ('${cabSku}')`, row); }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ CabinetPlacementCabinet`);

        // PitchTypePitch
        for (const row of pitchTypePitchData) {
            const typeName = row.pitch_type ? String(row.pitch_type).trim() : null;
            const pCode = row.pitch_code ? String(row.pitch_code).trim() : null;
            if (typeName && pCode && pitchTypeMap.has(typeName) && pitchMap.has(pCode)) {
                try { await prisma.pitchTypePitch.create({ data: { pitchTypeName: typeName, pitchCode: pCode } }); }
                catch(e) { if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002')) console.error("[PitchTypePitch Error]", row, e); }
            } else { console.warn(`[PitchTypePitch] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã PitchType ('${typeName}') –∏–ª–∏ Pitch ('${pCode}')`, row); }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ PitchTypePitch`);

        // CabinetComponent (–ò—Å–ø–æ–ª—å–∑—É–µ–º ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–∏—Å–∫–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤)
        for(const row of cabinetComponentsData) {
            const cabinetSku = row.cabinet_sku ? String(row.cabinet_sku).trim() : null;
            const cabinetId = cabinetSku ? cabinetSkuMap.get(cabinetSku) : null;
            const componentCode = row.component_code ? String(row.component_code).trim() : null;
            const componentId = componentCode ? componentCodeMap.get(componentCode) : null;
            const quantity = safeInt(row.component_count, `CabinetComponent ${cabinetSku}-${componentCode} quantity`, true, false);

            if (!(cabinetId && componentId)) {
                 console.warn(`[CabinetComponent] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω ID Cabinet ('${cabinetSku}') –∏–ª–∏ Component ('${componentCode}')`, row);
                 continue;
            }
            if (quantity === null) {
                 console.warn(`[CabinetComponent] –ü—Ä–æ–ø—É—Å–∫: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (${row.component_count}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –¥–ª—è cabinet ${cabinetSku}, component ${componentCode}`);
                 continue;
            }
            try {
                await prisma.cabinetComponent.create({ data: { cabinetId: cabinetId, componentId: componentId, quantity: quantity } });
            } catch (e) {
                 if (!(e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002'))
                     console.error(`[CabinetComponent Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –¥–ª—è cabinet ID ${cabinetId}, component ID ${componentId}, quantity ${quantity}`, e);
            }
        }
        console.log(`  - –ó–∞–ø–æ–ª–Ω–µ–Ω–æ CabinetComponent`);

        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');

    } catch (processingError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', processingError);
        throw processingError;
    }

    console.log('üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}


// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async function main() {
    try {
        const excelFilePath = path.resolve(__dirname, '../data/database.xlsx');
        await importDataFromExcel(excelFilePath);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ seed:', error);
        process.exit(1);
    } finally {
        console.log('--- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î ---');
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();