import { PrismaClient, Prisma } from '@prisma/client';
import * as XLSX from 'xlsx';
import * as path from 'path';
import * as fs from 'fs';
import { Decimal } from '@prisma/client/runtime/library';

const prisma = new PrismaClient();

console.log('--- –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DATABASE_URL:', process.env.DATABASE_URL?.replace(/:(.+?)@/, ':*****@') ?? '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

// --- –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞) ---
function getDataFromSheet(workbook: XLSX.WorkBook, sheetName: string): any[] {
    if (!workbook.SheetNames.includes(sheetName)) {
        console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ. –ü—Ä–æ–ø—É—Å–∫.`);
        return [];
    }
    const sheet = workbook.Sheets[sheetName];
    const jsonData = XLSX.utils.sheet_to_json(sheet, { raw: false, defval: null });
    // *** –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É Excel (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ jsonData) ***
    const dataWithoutSecondHeader = jsonData.slice(1);
    console.log(`  - –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ ${sheetName} (–ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ 2-–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞): ${dataWithoutSecondHeader.length}`);
    return dataWithoutSecondHeader;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ---
function safeDecimal(value: any, context: string): Decimal | null {
    if (value == null || value === '') { return null; }
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    const normalizedValue = typeof value === 'string' ? value.replace(',', '.') : value;
    if (typeof normalizedValue === 'number' || (typeof normalizedValue === 'string' && !isNaN(parseFloat(normalizedValue)) && isFinite(Number(normalizedValue)))) {
        try { return new Decimal(normalizedValue); }
        catch (e) { console.error(`‚ùå ${context}: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è '${value}' (–Ω–æ—Ä–º: '${normalizedValue}') –≤ Decimal`, e); return null; }
    } else { console.warn(`‚ö†Ô∏è ${context}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Decimal: '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ null.`); return null; }
}
function safeInt(value: any, context: string, allowZero: boolean = true, allowNull: boolean = true): number | null {
     if (value == null || value === '') { return allowNull ? null : (allowZero ? 0 : null); }
     // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
     const trimmedValue = typeof value === 'string' ? value.trim() : value;
     const num = Number(trimmedValue);
     if (!isNaN(num) && Number.isInteger(num)) {
         if (!allowZero && num === 0) { console.warn(`‚ö†Ô∏è ${context}: –ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ null.`); return null; }
         return num;
     } else { console.warn(`‚ö†Ô∏è ${context}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '${value}'. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${allowNull ? 'null' : (allowZero ? '0' : 'null')}.`); return allowNull ? null : (allowZero ? 0 : null); }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ ---
async function importDataFromExcel(filePath: string): Promise<void> {
    console.log(`üîç –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    if (!fs.existsSync(filePath)) throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    const workbook = XLSX.readFile(filePath);
    const sheetNames = workbook.SheetNames;
    console.log('üëÄ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:', sheetNames);

    // --- 0. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    console.log("–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...");
    const materialsData = getDataFromSheet(workbook, 'materials');
    const optionsData = getDataFromSheet(workbook, 'options');
    const manufacturersData = getDataFromSheet(workbook, 'manufacturers');
    const screenTypesData = getDataFromSheet(workbook, 'screen_types');
    const screenTypeMaterialsData = getDataFromSheet(workbook, 'screen_type_materials');
    const screenTypeOptionsData = getDataFromSheet(workbook, 'screen_type_options');
    const cabinetsData = getDataFromSheet(workbook, 'cabinets');
    const cabinetOptionsSheetName = sheetNames.includes('cabinet_options') ? 'cabinet_options' : 'cabinet_materials';
    if (!sheetNames.includes('cabinet_options') && sheetNames.includes('cabinet_materials')) console.warn("‚ÑπÔ∏è –õ–∏—Å—Ç 'cabinet_options' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'cabinet_materials'.");
    else if (!sheetNames.includes('cabinet_options') && !sheetNames.includes('cabinet_materials')) console.warn("‚ö†Ô∏è –õ–∏—Å—Ç—ã 'cabinet_options' –∏ 'cabinet_materials' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    const cabinetOptionsData = getDataFromSheet(workbook, cabinetOptionsSheetName);
    const cabinetComponentsData = getDataFromSheet(workbook, 'cabinet_components');
    const modulesData = getDataFromSheet(workbook, 'modules');
    const pixelStepsData = getDataFromSheet(workbook, 'pixel_steps');       // code @unique + step (Decimal)
    const pixelTypesData = getDataFromSheet(workbook, 'pixel_types');       // type @unique + frequency
    const pixelOptionsData = getDataFromSheet(workbook, 'pixel_options');   // code + type + width + height + screen_type + option_name
    const ipProtectionData = getDataFromSheet(workbook, 'ip_protection');
    const componentPriceData = getDataFromSheet(workbook, 'component_and_service_price');
    console.log("–ß—Ç–µ–Ω–∏–µ Excel –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");

    // --- 1. –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü ---
    console.log('–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    try {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç PixelStepDefinition
        await prisma.module.deleteMany();
        await prisma.pixelOption.deleteMany();
        // –ó–∞—Ç–µ–º —Å–∞–º PixelStepDefinition
        await prisma.pixelStepDefinition.deleteMany(); // –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        await prisma.cabinetComponent.deleteMany();
        await prisma.cabinetMaterial.deleteMany(); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É cabinet_materials
        await prisma.screenTypeOption.deleteMany();
        await prisma.screenTypeMaterial.deleteMany();
        await prisma.cabinet.deleteMany();
        await prisma.pixelType.deleteMany();
        await prisma.componentService.deleteMany();
        await prisma.ipProtection.deleteMany();
        await prisma.screenType.deleteMany();
        await prisma.manufacturer.deleteMany();
        await prisma.option.deleteMany();
        await prisma.material.deleteMany();
        console.log('–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch(e) { console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü:", e); throw e; }

    // --- 2. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏ –∫–∞—Ä—Ç ---
    console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...');
    const materialMap = new Map<string, number>(); // code -> id
    const optionMap = new Map<string, number>(); // code -> id
    const optionNameMap = new Map<string, number>(); // name -> id (–î–ª—è —Å–≤—è–∑–∏ –∏–∑ pixel_options)
    const manufacturerMap = new Map<string, number>(); // code -> id
    const screenTypeMap = new Map<string, number>(); // name -> id
    const ipCodeMap = new Map<string, number>(); // code -> id
    const componentCodeMap = new Map<string, number>(); // code -> id
    const pixelTypeMap = new Map<string, number>(); // type -> id (SMD -> 1)
    // –ö–∞—Ä—Ç–∞ –¥–ª—è PixelStepDefinition (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à–∞–≥–∏)
    const pixelStepDefinitionMap = new Map<string, number>(); // code -> id
    const cabinetSkuMap = new Map<string, number>(); // sku -> id

    try {
        // --- Material ---
        for (const row of materialsData) {
            const code = row.material_code ? String(row.material_code) : null;
            if (!code) { console.warn("[Material] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code"); continue; }
            try {
                const created = await prisma.material.create({ data: { code: code, name: String(row.material_name ?? '') } });
                materialMap.set(created.code, created.id);
            } catch(e) { console.error(`[Material Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Material: ${materialMap.size}`);

        // --- Option ---
        for (const row of optionsData) {
            const code = row.option_code ? String(row.option_code) : null;
            const name = row.option_name ? String(row.option_name) : null;
            if (!code || !name) { console.warn("[Option] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code –∏–ª–∏ name", row); continue; }
             try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                if (optionNameMap.has(name)) {
                    console.error(`[Option Error] –î—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∏–º—è –æ–ø—Ü–∏–∏ '${name}'. –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏:`, row);
                    continue;
                }
                const created = await prisma.option.create({ data: { code: code, name: name } });
                optionMap.set(created.code, created.id);
                optionNameMap.set(created.name, created.id); // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –∏–º–µ–Ω
            } catch(e) { console.error(`[Option Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è code:'${code}', name:'${name}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Option: ${optionMap.size}`);

        // --- Manufacturer ---
        for (const row of manufacturersData) {
            const code = row.manufacturer_code ? String(row.manufacturer_code) : null;
            if (!code) { console.warn("[Manufacturer] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code"); continue; }
            try {
                const created = await prisma.manufacturer.create({ data: { code: code, name: String(row.manufacturer_name ?? '') } });
                manufacturerMap.set(created.code, created.id);
            } catch(e) { console.error(`[Manufacturer Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Manufacturer: ${manufacturerMap.size}`);

        // --- ScreenType ---
        for (const row of screenTypesData) {
            const name = row.screen_type ? String(row.screen_type) : null;
            if (!name) { console.warn("[ScreenType] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç name"); continue; }
            const brightness = safeInt(row.screen_brightness, `ScreenType ${name} brightness`);
            try {
                const created = await prisma.screenType.create({ data: { name: name, brightness: brightness } });
                screenTypeMap.set(created.name, created.id);
            } catch(e) { console.error(`[ScreenType Error] '${name}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ ScreenType: ${screenTypeMap.size}`);

        // --- IpProtection ---
        for (const row of ipProtectionData) {
            const code = row.ip_code ? String(row.ip_code) : null;
            if (!code) { console.warn("[IpProtection] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code"); continue; }
            try {
                const created = await prisma.ipProtection.create({ data: {
                    code: code, protectionSolid: String(row.protection_solid ?? ''), protectionWater: String(row.protection_water ?? '')
                }});
                ipCodeMap.set(created.code, created.id);
            } catch(e) { console.error(`[IpProtection Error] '${code}'`, e); }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ IpProtection: ${ipCodeMap.size}`);

        // --- ComponentService ---
        for (const row of componentPriceData) {
             const code = row.component_code ? String(row.component_code) : null;
             if (!code) { console.warn("[ComponentService] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç code", row); continue; }
             const priceUsd = safeDecimal(row.price_usd, `Component ${code} price_usd`);
             const priceRub = safeDecimal(row.price_rub, `Component ${code} price_rub`);
             try {
                 const created = await prisma.componentService.create({ data: {
                     category: row.component_category ? String(row.component_category) : null,
                     code: code, name: String(row.component_name ?? ''), priceUsd: priceUsd, priceRub: priceRub,
                 }});
                 componentCodeMap.set(created.code, created.id);
             } catch(dbError) { console.error(`[ComponentService Error] '${code}'`, dbError); }
         }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ ComponentService: ${componentCodeMap.size}`);

        // --- PixelType ---
        for (const row of pixelTypesData) {
            const type = row.pixel_type ? String(row.pixel_type) : null;
            if (!type) { console.warn("[PixelType] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç type.", row); continue; }
            const frequency = safeInt(row.pixel_frequency, `PixelType ${type} frequency`);
            try {
                const created = await prisma.pixelType.create({ data: { type: type, frequency: frequency } });
                pixelTypeMap.set(created.type, created.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞
            } catch(e) {
                 if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
                     console.warn(`[PixelType Warn] –¢–∏–ø '${type}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º ID.`);
                     const existing = await prisma.pixelType.findUnique({ where: { type: type } });
                     if (existing) pixelTypeMap.set(existing.type, existing.id);
                 } else { console.error(`[PixelType Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${type}'`, e); }
            }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ/–ó–∞–≥—Ä—É–∂–µ–Ω–æ PixelType: ${pixelTypeMap.size}`);

        // --- PixelStepDefinition (–∏–∑ –ª–∏—Å—Ç–∞ pixel_steps) ---
        console.log(`--- –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è PixelStepDefinition ---`);
        for (const row of pixelStepsData) {
            const code = row.pixel_code ? String(row.pixel_code) : null;
            if (!code) { console.warn("[PixelStepDefinition] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç pixel_code.", row); continue; }

            const stepDecimal = safeDecimal(row.pixel_step, `PixelStep ${code} stepValue`);
            if (stepDecimal === null) {
                console.warn(`[PixelStepDefinition] –ü—Ä–æ–ø—É—Å–∫ '${code}': pixel_step –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (${row.pixel_step}).`);
                continue;
            }

            try {
                const created = await prisma.pixelStepDefinition.create({
                    data: { code: code, stepValue: stepDecimal }
                });
                pixelStepDefinitionMap.set(created.code, created.id);
            } catch (e) {
                 if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
                     console.warn(`[PixelStepDefinition Warn] –ö–æ–¥ '${code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º ID.`);
                     const existing = await prisma.pixelStepDefinition.findUnique({ where: { code: code } });
                     if (existing) pixelStepDefinitionMap.set(existing.code, existing.id);
                 } else { console.error(`[PixelStepDefinition Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${code}'`, e); }
            }
        }
        console.log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PixelStepDefinition ---`);
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ/–ó–∞–≥—Ä—É–∂–µ–Ω–æ PixelStepDefinition: ${pixelStepDefinitionMap.size}`);


        // --- PixelOption (–∏–∑ –ª–∏—Å—Ç–∞ pixel_options) ---
        console.log(`--- –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è PixelOption ---`);
        let pixelOptionsCreatedCount = 0;
        for (const row of pixelOptionsData) {
            const pixelCode = row.pixel_code ? String(row.pixel_code) : null;
            if (!pixelCode) { console.warn("[PixelOption] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç pixel_code.", row); continue; }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ pixelCode –≤ PixelStepDefinition (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–≤—è–∑–∏)
            if (!pixelStepDefinitionMap.has(pixelCode)) {
                console.warn(`[PixelOption] –ü—Ä–æ–ø—É—Å–∫: pixel_code '${pixelCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ PixelStepDefinition.`, row);
                continue;
            }

            const pixelTypeName = row.pixel_type ? String(row.pixel_type) : null;
            const pixelTypeId = pixelTypeName ? pixelTypeMap.get(pixelTypeName) : undefined;
            if (pixelTypeName && pixelTypeId === undefined) { console.warn(`[PixelOption] pixel_code '${pixelCode}': –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è pixel_type '${pixelTypeName}'.`); }

            const screenTypeName = row.screen_type ? String(row.screen_type) : null;
            const screenTypeId = screenTypeName ? screenTypeMap.get(screenTypeName) : undefined;
            if (screenTypeName && screenTypeId === undefined) { console.warn(`[PixelOption] pixel_code '${pixelCode}': –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è screen_type '${screenTypeName}'.`); }

            const moduleWidth = safeInt(row.module_width, `PixelOption ${pixelCode} module_width`, false, false);
            const moduleHeight = safeInt(row.module_height, `PixelOption ${pixelCode} module_height`, false, false);
            if (moduleWidth === null || moduleHeight === null) { console.warn(`[PixelOption] –ü—Ä–æ–ø—É—Å–∫ '${pixelCode}': –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ module_width/height.`); continue; }

            const optionNameFromExcel = row.option_name ? String(row.option_name) : null;
            if (optionNameFromExcel && !optionNameMap.has(optionNameFromExcel)) { console.warn(`[PixelOption] pixel_code '${pixelCode}': –æ–ø—Ü–∏—è '${optionNameFromExcel}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.`); }

            const dataToCreate: Prisma.PixelOptionCreateInput = {
                stepDefinition: { connect: { code: pixelCode } }, // –°–≤—è–∑—å –ø–æ –£–ù–ò–ö–ê–õ–¨–ù–û–ú–£ –∫–æ–¥—É
                moduleWidth: moduleWidth,
                moduleHeight: moduleHeight,
                optionName: optionNameFromExcel,
                ...(pixelTypeId !== undefined && { pixelType: { connect: { id: pixelTypeId } } }),
                ...(screenTypeId !== undefined && { screenType: { connect: { id: screenTypeId } } }),
            };

            // console.log(`[PixelOption Debug] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è '${pixelCode}' —Å –¥–∞–Ω–Ω—ã–º–∏: ${JSON.stringify(dataToCreate)}`); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            try {
                // ID –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –æ–Ω –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π
                await prisma.pixelOption.create({ data: dataToCreate });
                pixelOptionsCreatedCount++;
            } catch (e) {
                 console.error(`[PixelOption Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è pixel_code '${pixelCode}'`, e);
            }
        }
        console.log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PixelOption ---`);
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ PixelOption: ${pixelOptionsCreatedCount}`);

        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');


        // --- 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü (Module, Cabinet) ---
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü...');

        let modulesCreatedCount = 0;
        for (const row of modulesData) {
            const moduleSku = row.module_sku ? String(row.module_sku) : null;
            if (!moduleSku) { console.warn("[Module] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç sku.", row); continue; }

            const screenTypeName = row.screen_type ? String(row.screen_type) : null;
            const screenTypeId = screenTypeName ? screenTypeMap.get(screenTypeName) : null;

            const manufacturerCode = row.manufacturer ? String(row.manufacturer) : null;
            const pixelCode = row.pixel_code ? String(row.pixel_code) : null; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —à–∞–≥–∞

            // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (!screenTypeId) { console.warn(`(Module ${moduleSku}) ScreenType '${screenTypeName ?? 'null'}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.`); continue; }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û pixelCode –≤ PixelStepDefinition
            if (!pixelCode || !pixelStepDefinitionMap.has(pixelCode)) {
                console.warn(`(Module ${moduleSku}) PixelStepDefinition —Å –∫–æ–¥–æ–º '${pixelCode ?? 'null'}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.`);
                continue;
            }
            if (manufacturerCode && !manufacturerMap.has(manufacturerCode)) { console.warn(`(Module ${moduleSku}) Manufacturer '${manufacturerCode}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`); }

            const priceUsd = safeDecimal(row.price_usd, `Module ${moduleSku} price_usd`);
            // –ë–µ—Ä–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Å–∞–º–æ–≥–æ –º–æ–¥—É–ª—è
            const moduleWidth = safeInt(row.module_width, `Module ${moduleSku} module_width`, false, false);
            const moduleHeight = safeInt(row.module_height, `Module ${moduleSku} module_height`, false, false);
            if (moduleWidth === null || moduleHeight === null) { console.warn(`(Module ${moduleSku}) –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ module_width/height.`); continue; }
            const moduleFrequency = safeInt(row.module_frequency, `Module ${moduleSku} frequency`);
            const moduleBrightness = safeInt(row.module_brightness, `Module ${moduleSku} brightness`);

            const moduleData: Prisma.ModuleCreateInput = {
                 sku: moduleSku, type: row.module_type ? String(row.module_type) : null,
                 moduleWidth: moduleWidth, moduleHeight: moduleHeight, // –†–∞–∑–º–µ—Ä—ã –∏–∑ –º–æ–¥—É–ª—è
                 moduleFrequency: moduleFrequency, moduleBrightness: moduleBrightness,
                 priceUsd: priceUsd,
                 screenType: { connect: { id: screenTypeId } },
                 stepDefinition: { connect: { code: pixelCode } }, // –°–≤—è–∑—å —Å –£–ù–ò–ö–ê–õ–¨–ù–´–ú —à–∞–≥–æ–º
                 ...(manufacturerCode && manufacturerMap.has(manufacturerCode) && { manufacturer: { connect: { code: manufacturerCode } } })
             };

            try {
                 await prisma.module.create({ data: moduleData });
                 modulesCreatedCount++;
            } catch (e) {
                 if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
                     console.warn(`[Module Warn] –ú–æ–¥—É–ª—å SKU '${moduleSku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫.`);
                 } else { console.error(`[Module Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${moduleSku}'`, e); }
            }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Module: ${modulesCreatedCount}`);

        // --- Cabinet ---
        let cabinetsCreatedCount = 0;
        for (const row of cabinetsData) {
            const cabinetSku = row.cabinet_sku ? String(row.cabinet_sku) : null;
            if (!cabinetSku) { console.warn("[Cabinet] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç sku.", row); continue; }
            const screenTypeName = row.screen_type ? String(row.screen_type) : null;
            const screenTypeId = screenTypeName ? screenTypeMap.get(screenTypeName) : null;
            const priceUsd = safeDecimal(row.price_usd, `Cabinet ${cabinetSku} price_usd`);
            const width = safeInt(row.cabinet_width, `Cabinet ${cabinetSku} width`);
            const height = safeInt(row.cabinet_height, `Cabinet ${cabinetSku} height`);
            const moduleWidth = safeInt(row.module_width, `Cabinet ${cabinetSku} module_width`);
            const moduleHeight = safeInt(row.module_height, `Cabinet ${cabinetSku} module_height`);
            const modulesCount = safeInt(row.modules_count, `Cabinet ${cabinetSku} modules_count`);
            const placement = row.cabinet_placement ? String(row.cabinet_placement) : null;

            const cabinetData: Prisma.CabinetCreateInput = {
               sku: cabinetSku, name: row.cabinet_name ? String(row.cabinet_name) : null,
               width: width, height: height, placement: placement,
               moduleWidth: moduleWidth, moduleHeight: moduleHeight, modulesCount: modulesCount,
               priceUsd: priceUsd,
               ...(screenTypeId !== null && { screenType: { connect: { id: screenTypeId } } })
            };

            try {
                const created = await prisma.cabinet.create({ data: cabinetData });
                cabinetSkuMap.set(created.sku, created.id);
                cabinetsCreatedCount++;
            } catch (e) {
                 if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {
                     console.warn(`[Cabinet Warn] –ö–∞–±–∏–Ω–µ—Ç SKU '${cabinetSku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫.`);
                 } else { console.error(`[Cabinet Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è '${cabinetSku}'`, e); }
            }
        }
        console.log(`  - –°–æ–∑–¥–∞–Ω–æ Cabinet: ${cabinetsCreatedCount}`);
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');

        // --- 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü ---
        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
        // ScreenTypeMaterial
        for(const row of screenTypeMaterialsData) {
            const screenTypeName = row.screen_type ? String(row.screen_type) : null;
            const screenTypeId = screenTypeName ? screenTypeMap.get(screenTypeName) : null;
            const materialCode = row.material_code ? String(row.material_code) : null;
            const materialId = materialCode ? materialMap.get(materialCode) : null;
            if (screenTypeId && materialId) {
                try { await prisma.screenTypeMaterial.create({ data: { screenTypeId, materialId } }); }
                catch(e) { console.error("[ScreenTypeMaterial Error]", row, e); }
            } else { console.warn(`[ScreenTypeMaterial] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω ID ScreenType ('${screenTypeName}') –∏–ª–∏ Material ('${materialCode}')`, row); }
        }
        // ScreenTypeOption
        for(const row of screenTypeOptionsData) {
            const screenTypeName = row.screen_type ? String(row.screen_type) : null;
            const screenTypeId = screenTypeName ? screenTypeMap.get(screenTypeName) : null;
            const optionCode = row.option_code ? String(row.option_code) : null;
            const optionId = optionCode ? optionMap.get(optionCode) : null;
            if (screenTypeId && optionId) {
                 try { await prisma.screenTypeOption.create({ data: { screenTypeId, optionId } }); }
                 catch(e) { console.error("[ScreenTypeOption Error]", row, e); }
            } else { console.warn(`[ScreenTypeOption] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω ID ScreenType ('${screenTypeName}') –∏–ª–∏ Option ('${optionCode}')`, row); }
        }
        // CabinetMaterial (—á–∏—Ç–∞–µ—Ç –∏–∑ cabinetOptionsData)
        console.log(`--- –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è CabinetMaterial (–∏–∑ –ª–∏—Å—Ç–∞ ${cabinetOptionsSheetName}) ---`);
        for(const row of cabinetOptionsData) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
             const cabinetSku = row.cabinet_sku ? String(row.cabinet_sku) : null;
             const cabinetId = cabinetSku ? cabinetSkuMap.get(cabinetSku) : null;
             const materialCode = row.material_code ? String(row.material_code) : null; // –û–∂–∏–¥–∞–µ–º material_code
             const materialId = materialCode ? materialMap.get(materialCode) : null;

             if (!materialCode) {
                 console.warn(`[CabinetMaterial] –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ '${cabinetOptionsSheetName}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç material_code`, row);
                 continue;
             }

             if (cabinetId && materialId) {
                  try { await prisma.cabinetMaterial.create({ data: { cabinetId, materialId } }); }
                  catch(e) { console.error(`[CabinetMaterial Error] Cabinet:'${cabinetSku}', Material:'${materialCode}'`, e); }
             } else { console.warn(`[CabinetMaterial] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω ID Cabinet ('${cabinetSku}') –∏–ª–∏ Material ('${materialCode}')`, row); }
         }
         console.log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è CabinetMaterial ---`);
        // CabinetComponent
        for(const row of cabinetComponentsData) {
            const cabinetSku = row.cabinet_sku ? String(row.cabinet_sku) : null;
            const cabinetId = cabinetSku ? cabinetSkuMap.get(cabinetSku) : null;
            const componentCode = row.component_code ? String(row.component_code) : null;
            const componentId = componentCode ? componentCodeMap.get(componentCode) : null;
            const quantity = safeInt(row.component_count, `CabinetComponent ${cabinetSku}-${componentCode} quantity`, true, false);
            if (!(cabinetId && componentId)) {
                 console.warn(`[CabinetComponent] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω ID Cabinet ('${cabinetSku}') –∏–ª–∏ Component ('${componentCode}')`, row);
                 continue;
            }
            if (quantity === null || quantity <= 0) {
                 console.warn(`[CabinetComponent] –ü—Ä–æ–ø—É—Å–∫: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (${row.component_count} -> ${quantity}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –¥–ª—è cabinet ${cabinetSku}, component ${componentCode}`);
                 continue;
            }
            try {
                await prisma.cabinetComponent.create({ data: { cabinetId, componentId, quantity } });
            } catch (e) {
                console.error(`[CabinetComponent Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –¥–ª—è cabinet ${cabinetSku}, component ${componentCode}, quantity ${quantity}`, e);
            }
        }

        console.log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');

    } catch (processingError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', processingError);
    }

    console.log('üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}


// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async function main() {
    try {
        const excelFilePath = path.resolve(__dirname, '../data/database.xlsx');
        await importDataFromExcel(excelFilePath);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ seed:', error);
        process.exit(1);
    } finally {
        console.log('--- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î ---');
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();