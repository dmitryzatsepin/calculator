import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import * as path from 'path';
import * as fs from 'fs';
const prisma = new PrismaClient();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
function validateRequiredFields(data: Record<string, unknown>[], requiredFields: string[], sheetName: string): boolean {
  if (data.length === 0) {
    console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –ø—É—Å—Ç`);
    return false; // –õ–∏—Å—Ç –ø—É—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  }

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const firstRow = data[0];
  const missingHeaders = requiredFields.filter(field => !(field in firstRow));
  if (missingHeaders.length > 0) {
    console.error(`‚ùå –í –ª–∏—Å—Ç–µ ${sheetName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ Excel: ${missingHeaders.join(', ')}`);
    return false; // –û—à–∏–±–∫–∞: –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö –¥–ª—è –ö–ê–ñ–î–û–ô —Å—Ç—Ä–æ–∫–∏
  let allRowsValid = true; // –§–ª–∞–≥, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤–∞–ª–∏–¥–Ω—ã
  // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è row –∏ index
  data.forEach((row: Record<string, unknown>, index: number) => {
    for (const field of requiredFields) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º 'name' –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è PartPrice, –µ—Å–ª–∏ –æ–Ω–æ –≤ requiredFields
      const isNameField = (sheetName === 'PartsPrice' && field === 'name');

      if (row[field] === null || row[field] === undefined || String(row[field]).trim() === '') {
         // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'name' –¥–ª—è PartsPrice - —ç—Ç–æ –æ—à–∏–±–∫–∞
         if (isNameField) {
             console.error(`‚ùå –û—à–∏–±–∫–∞: –í –ª–∏—Å—Ç–µ ${sheetName}, —Å—Ç—Ä–æ–∫–∞ ${index + 2} (Excel –Ω—É–º–µ—Ä–∞—Ü–∏—è), –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ '${field}'. –°—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
             allRowsValid = false; // –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
         } else {
             // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
             console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í –ª–∏—Å—Ç–µ ${sheetName}, —Å—Ç—Ä–æ–∫–∞ ${index + 2}, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '${field}'.`);
         }
      }
    }
  });

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–æ—Å–æ–±–µ–Ω–Ω–æ 'name' –¥–ª—è PartPrice)
  return allRowsValid;
}


async function importFromExcel(filePath: string): Promise<void> {
  try {
    console.log(`üîç –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    
    const workbook = XLSX.readFile(filePath);
    console.log('üëÄ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ:', workbook.SheetNames);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤

    try {
      const screenTypesSheetName = 'ScreenTypes';
      if (workbook.SheetNames.includes(screenTypesSheetName)) {
          const screenTypesSheet = workbook.Sheets[screenTypesSheetName];
          const screenTypes: Record<string, unknown>[] = XLSX.utils.sheet_to_json(screenTypesSheet);
          if (validateRequiredFields(screenTypes, ['name', 'material', 'option'], screenTypesSheetName)) { // –î–æ–±–∞–≤–∏–ª material/option –≤ –ø—Ä–æ–≤–µ—Ä–∫—É
              await prisma.screenType.deleteMany({});
              for (const row of screenTypes) {
                  const optionArray = row.option ? String(row.option).split(',').map(s => s.trim()) : [];
                  const materialArray = row.material ? String(row.material).split(',').map(s => s.trim()) : [];
                  await prisma.screenType.create({
                      data: {
                          name: String(row.name),
                          option: { set: optionArray },
                          material: { set: materialArray }
                      }
                  });
              }
              console.log('‚úÖ –¢–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
          }
      } else {
          console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${screenTypesSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ`);
      }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ScreenTypes:', e);
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–≥–∏ –ø–∏–∫—Å–µ–ª–µ–π

    try {
      const pixelStepsSheetName = 'PixelSteps';
      if (workbook.SheetNames.includes(pixelStepsSheetName)) {
          const pixelStepsSheet = workbook.Sheets[pixelStepsSheetName];
          const pixelSteps: Record<string, unknown>[] = XLSX.utils.sheet_to_json(pixelStepsSheet);
           // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è PixelSteps
          const requiredPixelFields = ['name', 'type', 'width', 'height', 'location', 'brightness', 'refreshFreq', 'priceUsd'];
          if (validateRequiredFields(pixelSteps, requiredPixelFields, pixelStepsSheetName)) {
              await prisma.pixelStep.deleteMany({});
              for (const row of pixelSteps) {
                  const optionArray = row.option ? String(row.option).split(',').map(s => s.trim()) : [];
                  await prisma.pixelStep.create({
                      data: {
                          name: String(row.name),
                          type: String(row.type),
                          width: Number(row.width),
                          height: Number(row.height),
                          brightness: Number(row.brightness ?? 0),
                          refreshFreq: Number(row.refreshFreq ?? 60),
                          location: String(row.location),
                          option: { set: optionArray },
                          priceUsd: Number(row.priceUsd ?? 0) // –ò—Å–ø–æ–ª—å–∑—É–µ–º priceUsd (–∏–∑ Prisma) <= priceUsd (–∏–∑ Excel)
                      }
                  });
              }
              console.log('‚úÖ –®–∞–≥–∏ –ø–∏–∫—Å–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
          }
      } else {
          console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${pixelStepsSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ`);
      }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ PixelSteps:', e);
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã

    try {
      const cabinetsSheetName = 'Cabinets';
      if (workbook.SheetNames.includes(cabinetsSheetName)) {
          const cabinetsSheet = workbook.Sheets[cabinetsSheetName];
          const cabinets: Record<string, unknown>[] = XLSX.utils.sheet_to_json(cabinetsSheet);
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Cabinets
          const requiredCabinetFields = [
              'name', 'width', 'height', 'powerUnit', 'powerUnitCapacity', 'powerUnitQ',
              'receiver', 'cooler', 'modulesQ', 'location', 'material', 'pixelStep',
              'placement', 'priceUsd', 'mountPriceRub', 'deliveryPriceRub', 'addPriceRub'
          ];
          if (validateRequiredFields(cabinets, requiredCabinetFields, cabinetsSheetName)) {
              await prisma.cabinet.deleteMany({});
              for (const row of cabinets) {
                  const pixelStepArray = row.pixelStep ? String(row.pixelStep).split(',').map(s => s.trim()) : [];
                  const materialArray = row.material ? String(row.material).split(',').map(s => s.trim()) : [];
                  await prisma.cabinet.create({
                      data: {
                          name: String(row.name),
                          width: Number(row.width),
                          height: Number(row.height),
                          modulesQ: Number(row.modulesQ),
                          powerUnit: String(row.powerUnit), // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ prisma generate –≤—ã–ø–æ–ª–Ω–µ–Ω!
                          powerUnitCapacity: Number(row.powerUnitCapacity),
                          powerUnitQ: Number(row.powerUnitQ),
                          receiver: Number(row.receiver),
                          cooler: Number(row.cooler),
                          location: String(row.location),
                          material: { set: materialArray },
                          placement: String(row.placement),
                          pixelStep: { set: pixelStepArray },
                          priceUsd: Number(row.priceUsd ?? 0),      // –ò—Å–ø–æ–ª—å–∑—É–µ–º priceUsd (–∏–∑ Prisma) <= priceUsd (–∏–∑ Excel)
                          mountPriceRub: Number(row.mountPriceRub ?? 0),
                          deliveryPriceRub: Number(row.deliveryPriceRub ?? 0),
                          addPriceRub: Number(row.addPriceRub ?? 0)
                      }
                  });
              }
              console.log('‚úÖ –ö–∞–±–∏–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
          }
      } else {
          console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${cabinetsSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ`);
      }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Cabinets:', e);
    }
    
    // üî• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É IP-–∫–æ–¥–æ–≤ (–∑–∞—â–∏—Ç—ã)

    try {
      const ipSheetName = 'IngressProtection';
      if (workbook.SheetNames.includes(ipSheetName)) {
          const ipProtectionSheet = workbook.Sheets[ipSheetName];
          const ipProtection: Record<string, unknown>[] = XLSX.utils.sheet_to_json(ipProtectionSheet);
          if (validateRequiredFields(ipProtection, ['code', 'hardObjectProtection', 'waterProtection'], ipSheetName)) {
              await prisma.ingressProtection.deleteMany({});
              for (const row of ipProtection) {
                  await prisma.ingressProtection.create({
                      data: {
                          code: String(row.code),
                          hardObjectProtection: String(row.hardObjectProtection),
                          waterProtection: String(row.waterProtection),
                      }
                  });
              }
              console.log('‚úÖ –î–∞–Ω–Ω—ã–µ IP-–∑–∞—â–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
          }
      } else {
          console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${ipSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ`);
      }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ IngressProtection:', e);
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ

    try {
      const partsSheetName = 'PartsPrice';
      if (workbook.SheetNames.includes(partsSheetName)) {
          const sheet = workbook.Sheets[partsSheetName];
          const rows: Record<string, unknown>[] = XLSX.utils.sheet_to_json(sheet, { defval: null });
          const requiredExcelCols = ['name', 'nameEn', 'priceUsd', 'priceRub'];

          if (validateRequiredFields(rows, requiredExcelCols, partsSheetName)) {
              console.log(`‚è≥ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã PartPrice...`);
              await prisma.partPrice.deleteMany({}); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ prisma generate –≤—ã–ø–æ–ª–Ω–µ–Ω!

              console.log(`‚è≥ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ '${partsSheetName}'...`);
              let createdCount = 0;
              let skippedCount = 0;

              for (const row of rows) {
                  const nameValue = row.name ? String(row.name).trim() : null;
                  const nameEnValue = row.nameEn ? String(row.nameEn).trim() : "";
                  const priceUsdValue = (row.priceUsd != null) ? Number(row.priceUsd) : 0;
                  const priceRubValue = (row.priceRub != null) ? Number(row.priceRub) : 0;

                  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ 'name' –ø—É—Å—Ç–æ–µ
                  if (!nameValue) {
                      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ validateRequiredFields
                      skippedCount++;
                      continue;
                  }

                  try {
                      await prisma.partPrice.create({ // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ prisma generate –≤—ã–ø–æ–ª–Ω–µ–Ω!
                          data: {
                              name: nameValue,           // –ü–æ–ª–µ 'name' –≤ Prisma <= –∫–æ–ª–æ–Ω–∫–∞ 'name' –≤ Excel
                              nameEn: nameEnValue,       // –ü–æ–ª–µ 'nameEn' –≤ Prisma <= –∫–æ–ª–æ–Ω–∫–∞ 'nameEn' –≤ Excel
                              priceUsd: priceUsdValue,   // –ü–æ–ª–µ 'priceUsd' –≤ Prisma <= –∫–æ–ª–æ–Ω–∫–∞ 'priceUsd' –≤ Excel
                              priceRub: priceRubValue,   // –ü–æ–ª–µ 'priceRub' –≤ Prisma <= –∫–æ–ª–æ–Ω–∫–∞ 'priceRub' –≤ Excel
                          }
                      });
                      createdCount++;
                  } catch (e: any) {
                      if (e.code === 'P2002' && e.meta?.target?.includes('name')) {
                          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å name='${nameValue}'. –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
                      } else {
                          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ PartPrice –¥–ª—è '${nameValue}':`, e);
                      }
                      skippedCount++;
                  }
              }
              console.log(`‚úÖ –¶–µ–Ω—ã (${partsSheetName}): —Å–æ–∑–¥–∞–Ω–æ ${createdCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}.`);
          }
      } else {
          console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${partsSheetName} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ PartPrice:', e);
    }
    

    console.log('üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const defaultPath = path.resolve(__dirname, '../data/database.xlsx');
    console.log(`üå± –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel: ${defaultPath}`);
    
    await importFromExcel(defaultPath);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });