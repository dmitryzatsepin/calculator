import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import * as path from 'path';
import * as fs from 'fs';
const prisma = new PrismaClient();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
function validateRequiredFields(data: Record<string, unknown>[], requiredFields: string[], sheetName: string): boolean {
  if (data.length === 0) {
    console.warn(`‚ö†Ô∏è –õ–∏—Å—Ç ${sheetName} –ø—É—Å—Ç`);
    return false;
  }
  
  const firstRow = data[0];
  const missingFields = requiredFields.filter(field => !(field in firstRow));
  
  if (missingFields.length > 0) {
    console.error(`‚ùå –í –ª–∏—Å—Ç–µ ${sheetName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
    return false;
  }
  
  return true;
}

async function importFromExcel(filePath: string): Promise<void> {
  try {
    console.log(`üîç –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.readFile(filePath);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤
    if (workbook.SheetNames.includes('ScreenTypes')) {
      const screenTypesSheet = workbook.Sheets['ScreenTypes'];
      const screenTypes: Record<string, unknown>[] = XLSX.utils.sheet_to_json(screenTypesSheet);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (validateRequiredFields(screenTypes, ['name'], 'ScreenTypes')) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        await prisma.screenType.deleteMany({});
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É
        for (const row of screenTypes) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º option –∏ material –≤ –º–∞—Å—Å–∏–≤—ã —Å—Ç—Ä–æ–∫
          const optionArray = row.option 
            ? String(row.option).split(',').map(s => s.trim()) 
            : [];
          const materialArray = row.material 
            ? String(row.material).split(',').map(s => s.trim()) 
            : [];
            
          await prisma.screenType.create({
            data: {
              name: String(row.name),
              option: {set: optionArray},
              material: {set: materialArray}
            }
          });
        }
        
        console.log('‚úÖ –¢–∏–ø—ã —ç–∫—Ä–∞–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      }
    } else {
      console.warn('‚ö†Ô∏è –õ–∏—Å—Ç ScreenTypes –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ');
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–≥–∏ –ø–∏–∫—Å–µ–ª–µ–π
    if (workbook.SheetNames.includes('PixelSteps')) {
      const pixelStepsSheet = workbook.Sheets['PixelSteps'];
      const pixelSteps: Record<string, unknown>[] = XLSX.utils.sheet_to_json(pixelStepsSheet);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (validateRequiredFields(pixelSteps, ['name', 'type', 'width', 'height'], 'PixelSteps')) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        await prisma.pixelStep.deleteMany({});
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É
        for (const row of pixelSteps) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º option –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
          const optionArray = row.option 
            ? String(row.option).split(',').map(s => s.trim()) 
            : [];
            
          await prisma.pixelStep.create({
            data: {
              name: String(row.name),
              type: String(row.type),
              width: Number(row.width),
              height: Number(row.height),
              brightness: row.brightness ? Number(row.brightness) : 0,  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
              refreshFreq: row.refreshFreq ? Number(row.refreshFreq) : 60, // ‚úÖ –ï—Å–ª–∏ NaN, —Å—Ç–∞–≤–∏–º 60 –ì—Ü
              location: String(row.location),
              option: {set: optionArray},
              priceUsd: row.priceUsd ? Number(row.priceUsd) : 0
            }
          });
        }
        
        console.log('‚úÖ –®–∞–≥–∏ –ø–∏–∫—Å–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      }
    } else {
      console.warn('‚ö†Ô∏è –õ–∏—Å—Ç PixelSteps –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ');
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã
    if (workbook.SheetNames.includes('Cabinets')) {
      const cabinetsSheet = workbook.Sheets['Cabinets'];
      const cabinets: Record<string, unknown>[] = XLSX.utils.sheet_to_json(cabinetsSheet);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      const requiredCabinetFields = ['name', 'width', 'height', 'modulesQ', 'powerUnitCapacity', 'powerUnitQ', 'receiver', 'cooler'];
      
      if (validateRequiredFields(cabinets, requiredCabinetFields, 'Cabinets')) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        await prisma.cabinet.deleteMany({});
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É
        for (const row of cabinets) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pixelStep –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
          const pixelStepArray = row.pixelStep 
            ? String(row.pixelStep).split(',').map(s => s.trim()) 
            : [];
            const materialArray = row.material 
            ? String(row.material).split(',').map(s => s.trim()) 
            : [];  
            
          await prisma.cabinet.create({
            data: {
              name: String(row.name),
              width: Number(row.width),
              height: Number(row.height),
              modulesQ: Number(row.modulesQ),
              powerUnitCapacity: Number(row.powerUnitCapacity),
              powerUnitQ: Number(row.powerUnitQ),
              receiver: Number(row.receiver),
              cooler: Number(row.cooler),
              location: String(row.location),
              material: {set: materialArray},
              placement: String(row.placement),
              pixelStep: {set: pixelStepArray},
              priceUsd: row.priceUsd ? Number(row.priceUsd) : 0,
              mountPriceRub: row.mountPriceRub ? Number(row.mountPriceRub) : 0,
              deliveryPriceRub: row.deliveryPriceRub ? Number(row.deliveryPriceRub) : 0,
              addPriceRub: row.addPriceRub ? Number(row.addPriceRub) : 0
            }
          });
        }
        
        console.log('‚úÖ –ö–∞–±–∏–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      }
    } else {
      console.warn('‚ö†Ô∏è –õ–∏—Å—Ç Cabinets –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ');
    }
    
        // üî• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É IP-–∫–æ–¥–æ–≤ (–∑–∞—â–∏—Ç—ã)
        if (workbook.SheetNames.includes('IngressProtection')) {
          const ipProtectionSheet = workbook.Sheets['IngressProtection'];
          const ipProtection: Record<string, unknown>[] = XLSX.utils.sheet_to_json(ipProtectionSheet);
    
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          if (validateRequiredFields(ipProtection, ['code', 'hardObjectProtection', 'waterProtection'], 'IPProtection')) {
            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            await prisma.ingressProtection.deleteMany({});
    
            // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É
            for (const row of ipProtection) {
              await prisma.ingressProtection.create({
                data: {
                  code: String(row.code),
                  hardObjectProtection: String(row.hardObjectProtection),
                  waterProtection: String(row.waterProtection),
                }
              });
            }
    
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ IP-–∑–∞—â–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
          }
        } else {
          console.warn('‚ö†Ô∏è –õ–∏—Å—Ç IngressProtection –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ');
        }

    console.log('üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    const defaultPath = path.resolve(__dirname, '../data/database.xlsx');
    console.log(`üå± –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel: ${defaultPath}`);
    
    await importFromExcel(defaultPath);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });