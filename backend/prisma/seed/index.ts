// prisma/seed/index.ts
import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import * as path from 'path';
import * as fs from 'fs';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ —Å–∏–¥–∏–Ω–≥–∞
import { clearDatabase } from '../seed/clearDatabase';
import { createIdMaps } from './config'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç
import { seedReferences } from '../seed/seedReferences';
import { seedEntities } from '../seed/seedEntities';
import { seedRelations } from '../seed/seedRelations';
import { seedPrices } from './seedPrices';

const prisma = new PrismaClient();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Å–∏–¥–∏–Ω–≥–∞
export type SeedMode = 'clear' | 'upsert';
let seedMode: SeedMode = 'clear'; // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const args = process.argv.slice(2);
const modeArg = args.find(arg => arg.startsWith('--mode=') || arg.startsWith('-m='));
if (modeArg) {
    const modeValue = modeArg.split('=')[1];
    if (modeValue === 'upsert') {
        seedMode = 'upsert';
    } else if (modeValue !== 'clear') {
        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º '--mode=${modeValue}'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'clear'.`);
    }
} else if (args.includes('--upsert') || args.includes('-u')) { // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–ª–∞–≥
     seedMode = 'upsert';
}

console.log(`üå± –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å–∏–¥–∏–Ω–≥–∞ –≤ —Ä–µ–∂–∏–º–µ: ${seedMode.toUpperCase()}`);


async function main() {
    const startTime = Date.now();

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    const excelFilePath = path.resolve(__dirname, '../../data/database.xlsx');
    console.log(`[Main] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Excel —Ñ–∞–π–ª: ${excelFilePath}`);
    if (!fs.existsSync(excelFilePath)) {
        console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${excelFilePath}`);
        process.exit(1);
    }
    let workbook: XLSX.WorkBook;
    try {
        workbook = XLSX.readFile(excelFilePath);
        console.log('[Main] –§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.');
    } catch (e) {
         console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª Excel:`, e);
         process.exit(1);
    }

    // 2. –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¢–û–õ–¨–ö–û –í –†–ï–ñ–ò–ú–ï 'clear')
    if (seedMode === 'clear') {
        try {
            await clearDatabase(prisma);
        } catch (e) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
            process.exit(1);
        }
    } else {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∂–∏–º: ${seedMode.toUpperCase()}).`);
    }


    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç ID (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ)
    const idMaps = createIdMaps();
    console.log('[Main] –ö–∞—Ä—Ç—ã ID —Å–æ–∑–¥–∞–Ω—ã (–±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã).');

    // 4. –°–∏–¥–∏–Ω–≥ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç upsert –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ)
    try {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–¥–∏–Ω–≥–∞
        await seedReferences(prisma, workbook, idMaps, seedMode);
    } catch (e) {
         console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–¥–∏–Ω–≥–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
         process.exit(1);
    }

    // 5. –°–∏–¥–∏–Ω–≥ –û—Å–Ω–æ–≤–Ω—ã—Ö –°—É—â–Ω–æ—Å—Ç–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç upsert –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ)
    try {
         // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–¥–∏–Ω–≥–∞
        await seedEntities(prisma, workbook, idMaps, seedMode);
    } catch (e) {
         console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–¥–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
         process.exit(1);
    }

    // 6. –°–∏–¥–∏–Ω–≥ –°–≤—è–∑–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç upsert/createMany –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ)
    try {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–¥–∏–Ω–≥–∞
        await seedRelations(prisma, workbook, idMaps, seedMode);
        await seedPrices(prisma, workbook, idMaps, seedMode);
    } catch (e) {
         console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–¥–∏–Ω–≥–∞ —Å–≤—è–∑–µ–π. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
         process.exit(1);
    }

    const endTime = Date.now();
    console.log(`\nüèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–¥–∏–Ω–≥–∞ (${seedMode.toUpperCase()}): ${(endTime - startTime) / 1000} —Å–µ–∫.`);
    console.log('üéâ –°–∫—Ä–∏–ø—Ç —Å–∏–¥–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
main()
  .catch((e) => {
    console.error('\nüí• –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –í main():', e);
    process.exit(1);
  })
  .finally(async () => {
    console.log('--- [Main] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î ---');
    await prisma.$disconnect();
    console.log('--- [Main] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');
  });