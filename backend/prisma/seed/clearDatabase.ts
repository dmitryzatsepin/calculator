// prisma/seed/clearDatabase.ts
import { PrismaClient, Prisma } from '@prisma/client';

export async function clearDatabase(prisma: PrismaClient): Promise<void> {
  console.log('üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  const startTime = Date.now();

  const modelNames = Prisma.dmmf.datamodel.models.map((model) => model.name);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ú–ï–ù–ê –ú–û–î–ï–õ–ï–ô –∏–∑ schema.prisma (CamelCase)
  const deletionOrder: string[] = [
    // –°–≤—è–∑—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã M-N
    'ItemCategorySubcategory',
    'CabinetPitch',
    'CabinetPlacementRelation',
    'CabinetItemComponent',
    'ModuleItemComponent',
    'CabinetCategory',          
    'CabinetSubcategory',       
    'CabinetLocation',          
    'CabinetMaterial',          
    'CabinetCabinetSize',       
    'CabinetManufacturer',      
    'CabinetSupplier',          
    'ModuleCategory',           
    'ModuleSubcategory',        
    'ModuleLocation',           
    'ModuleRefreshRate',        
    'ModuleBrightness',         
    'ModuleModuleSize',         
    'ModulePitch',              
    'ModuleManufacturer',       
    'ModuleOption',             
    'ItemPrice',                
    'ItemSupplier',             
    'CabinetPrice',             
    'ModulePrice',              
    'CabinetSizeModuleSize',    
    'ScreenTypeOption',         
    'ScreenTypeControlType',    
    'ScreenTypeSensor',      
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    'Item',
    'Module',
    'Cabinet',

    // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    'ItemSubcategory',
    'ItemCategory',
    'CabinetSize',
    'ModuleSize',
    'IpProtection',
    'Supplier',
    'Manufacturer',
    'Brightness',
    'RefreshRate',
    'Pitch',
    'Placement',
    'Location',
    'Material',
    'ControlType',
    'Sensor',
    'Option',
    'ScreenType',
    // User –Ω–µ —É–¥–∞–ª—è–µ–º
  ];

  const validDeletionOrder = deletionOrder.filter(name => modelNames.includes(name));
  const remainingModels = modelNames.filter(name => !deletionOrder.includes(name) && name !== 'User'); 
  const finalDeletionOrder = [...validDeletionOrder, ...remainingModels];

  console.log('–ü–æ—Ä—è–¥–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Prisma:', finalDeletionOrder.join(', '));

  try {
    for (const modelName of finalDeletionOrder) {
        if (modelName === 'User') continue; 

        const prismaModel = (prisma as any)[modelName.charAt(0).toLowerCase() + modelName.slice(1)];
        if (prismaModel && typeof prismaModel.deleteMany === 'function') {
             console.log(`  - –û—á–∏—Å—Ç–∫–∞ ${modelName}...`);
             await prismaModel.deleteMany({});
        } else {
             console.warn(`  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ deleteMany –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}. –ü—Ä–æ–ø—É—Å–∫.`);
        }
    }
    const endTime = Date.now();
    console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${(endTime - startTime) / 1000} —Å–µ–∫.`);
  } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error; 
  } 
}