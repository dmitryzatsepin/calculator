generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Модель пользователя ---
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  name      String
}

enum Role {
  USER
  ADMIN
}

// --- Основные Справочники ---

model ScreenType {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("screen_type_code")
  name      String   @map("screen_type_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations ScreenTypeLocation[]
  pitches   ScreenTypePitch[]

  @@map("screen_types")
}

model Location {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("location_code")
  name      String   @map("location_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screenTypes ScreenTypeLocation[]
  materials   LocationMaterial[]
  pitches     LocationPitch[]
  cabinets    LocationCabinet[]
  modules   Module[]

  @@map("locations")
}

model Material {
  id   Int    @id @default(autoincrement())
  code String @unique @map("material_code")
  name String @map("material_name")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations LocationMaterial[]
  cabinets  MaterialCabinet[]

  @@map("materials")
}

model RefreshRate {
  value     Int      @id @unique @map("refresh_rate_value") // Значение само по себе уникальный ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules Module[] // Модули с этой частотой

  @@map("refresh_rates")
}

model Brightness {
  value     Int      @id @unique @map("brightness_value") // Значение само по себе уникальный ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules Module[] // Модули с этой яркостью

  @@map("brightness_values")
}

model Manufacturer {
  id   Int    @id @default(autoincrement())
  code String @unique @map("manufacturer_code")
  name String @map("manufacturer_name") // Добавим unique для поиска по имени
  // Если имена могут повторяться, поиск будет сложнее
  // @unique <--- РЕШИ, НУЖНО ЛИ? ЕСЛИ НЕТ, УБЕРИ

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules Module[]

  @@map("manufacturers")
}

model CabinetPlacement {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("cabinet_placement_code")
  name      String   @map("cabinet_placement_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cabinets CabinetPlacementCabinet[]

  @@map("cabinet_placements")
}

model Pitch {
  id           Int      @id @default(autoincrement())
  code         String   @unique @map("pitch_code")
  pitchValue   Decimal  @map("pitch_value") @db.Decimal(5, 2)
  moduleWidth  Int      @map("module_width")
  moduleHeight Int      @map("module_height")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  screenTypes ScreenTypePitch[]
  locations   LocationPitch[]
  pitchTypes  PitchTypePitch[]
  modules     Module[]

  @@map("pitches")
}

model PitchType {
  id        Int      @id @default(autoincrement())
  name      String   @unique @map("pitch_type_name")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pitches PitchTypePitch[]

  @@map("pitch_types")
}

model IpProtection {
  id              Int    @id @default(autoincrement())
  code            String @unique @map("ip_code")
  protectionSolid String @map("protection_solid")
  protectionWater String @map("protection_water")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ip_protection")
}

model ComponentService {
  id       Int      @id @default(autoincrement())
  category String?  @map("component_category")
  code     String   @unique @map("component_code")
  name     String   @map("component_name")
  priceUsd Decimal? @map("price_usd") @db.Decimal(12, 2)
  priceRub Decimal? @map("price_rub") @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cabinetComponents CabinetComponent[]

  @@map("component_service_price")
}

// --- Основные Сущности (Зависимые) ---

model Module {
  id       Int      @id @default(autoincrement())
  sku      String   @unique @map("module_sku")
  type     String?  @map("module_type")
  priceUsd Decimal? @map("price_usd") @db.Decimal(12, 2)

  // Связи
  manufacturerCode String?       @map("manufacturer_code") // Внешний ключ - код
  manufacturer     Manufacturer? @relation(fields: [manufacturerCode], references: [code])

  locationCode   String?          @map("location_code") // Делаем опциональной ? или обязательной - реши сам
  location       Location?        @relation(fields: [locationCode], references: [code])

  pitchCode String @map("pitch_code")
  pitch     Pitch  @relation(fields: [pitchCode], references: [code])

  refreshRateValue Int?         @map("refresh_rate_value") // Внешний ключ - значение
  refreshRate      RefreshRate? @relation(fields: [refreshRateValue], references: [value])

  brightnessValue Int?        @map("brightness_value") // Внешний ключ - значение
  brightness      Brightness? @relation(fields: [brightnessValue], references: [value])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modules")
}

model Cabinet {
  id           Int      @id @default(autoincrement())
  sku          String   @unique @map("cabinet_sku")
  name         String?  @map("cabinet_name")
  width        Int?     @map("cabinet_width")
  height       Int?     @map("cabinet_height")
  moduleWidth  Int?     @map("module_width")
  moduleHeight Int?     @map("module_height")
  modulesCount Int?     @map("modules_count")
  priceUsd     Decimal? @map("price_usd") @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations  LocationCabinet[]
  materials  MaterialCabinet[]
  placements CabinetPlacementCabinet[]
  components CabinetComponent[]

  @@map("cabinets")
}

// --- Связующие Таблицы (Без изменений структуры, только ссылки на обновленные модели) ---

model ScreenTypeLocation {
  screenTypeCode String     @map("screen_type_code")
  locationCode   String     @map("location_code")
  screenType     ScreenType @relation(fields: [screenTypeCode], references: [code], onDelete: Cascade)
  location       Location   @relation(fields: [locationCode], references: [code], onDelete: Cascade)

  @@id([screenTypeCode, locationCode])
  @@map("screen_type_locations")
}

model ScreenTypePitch {
  screenTypeCode String     @map("screen_type_code")
  pitchCode      String     @map("pitch_code")
  screenType     ScreenType @relation(fields: [screenTypeCode], references: [code], onDelete: Cascade)
  pitch          Pitch      @relation(fields: [pitchCode], references: [code], onDelete: Cascade)

  @@id([screenTypeCode, pitchCode])
  @@map("screen_type_pitches")
}

model LocationMaterial {
  locationCode String   @map("location_code")
  materialCode String   @map("material_code")
  location     Location @relation(fields: [locationCode], references: [code], onDelete: Cascade)
  material     Material @relation(fields: [materialCode], references: [code], onDelete: Cascade)

  @@id([locationCode, materialCode])
  @@map("location_materials")
}

model LocationPitch {
  locationCode String   @map("location_code")
  pitchCode    String   @map("pitch_code")
  location     Location @relation(fields: [locationCode], references: [code], onDelete: Cascade)
  pitch        Pitch    @relation(fields: [pitchCode], references: [code], onDelete: Cascade)

  @@id([locationCode, pitchCode])
  @@map("location_pitches")
}

model LocationCabinet {
  locationCode String   @map("location_code")
  cabinetSku   String   @map("cabinet_sku")
  location     Location @relation(fields: [locationCode], references: [code], onDelete: Cascade)
  cabinet      Cabinet  @relation(fields: [cabinetSku], references: [sku], onDelete: Cascade)

  @@id([locationCode, cabinetSku])
  @@map("location_cabinets")
}

model MaterialCabinet {
  materialCode String   @map("material_code")
  cabinetSku   String   @map("cabinet_sku")
  material     Material @relation(fields: [materialCode], references: [code], onDelete: Cascade)
  cabinet      Cabinet  @relation(fields: [cabinetSku], references: [sku], onDelete: Cascade)

  @@id([materialCode, cabinetSku])
  @@map("material_cabinets")
}

model CabinetPlacementCabinet {
  cabinetPlacementCode String           @map("cabinet_placement_code")
  cabinetSku           String           @map("cabinet_sku")
  placement            CabinetPlacement @relation(fields: [cabinetPlacementCode], references: [code], onDelete: Cascade)
  cabinet              Cabinet          @relation(fields: [cabinetSku], references: [sku], onDelete: Cascade)

  @@id([cabinetPlacementCode, cabinetSku])
  @@map("cabinet_placement_cabinets")
}

model PitchTypePitch {
  pitchTypeName String    @map("pitch_type_name")
  pitchCode     String    @map("pitch_code")
  pitchType     PitchType @relation(fields: [pitchTypeName], references: [name], onDelete: Cascade)
  pitch         Pitch     @relation(fields: [pitchCode], references: [code], onDelete: Cascade)

  @@id([pitchTypeName, pitchCode])
  @@map("pitch_type_pitches")
}

model CabinetComponent {
  cabinetId   Int              @map("cabinet_id")
  componentId Int              @map("component_id")
  quantity    Int              @map("component_count")
  cabinet     Cabinet          @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  component   ComponentService @relation(fields: [componentId], references: [id], onDelete: Restrict)

  @@id([cabinetId, componentId])
  @@map("cabinet_components")
}
