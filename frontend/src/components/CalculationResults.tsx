import { Drawer, Table, Button, Center, Text, Stack } from "@mantine/core";
import styles from "../styles/CalculationResults.module.scss";

// --- –¢–∏–ø—ã ---
// –¢–∏–ø –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–±–∏–Ω–µ—Ç–µ, –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç DisplayParameters
type CabinetInfo = {
  id: number;
  name: string;
  width: number;
  height: number;
  pixelStep: string[];
  material: string[];
  modulesQ: number;
  powerUnitQ: number;
  receiver: number;
};

// –¢–∏–ø –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ CalculationResults
interface CalculationResultsProps {
  opened: boolean;
  onClose: () => void;
  data: {
    width: string;
    height: string;
    screenType: string | null;
    selectedProtection: string | null;
    selectedMaterial: string | null;
    selectedPixelStep: string | null;
    selectedCabinet: CabinetInfo | null;
    selectedOptions: string[];
    exchangeRate: number;
    selectedBrightness: number | string;
    selectedRefreshFreq: number | string;
  };
}

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const SPARE_PARTS_PERCENTAGE = 0.05; // 5% –ó–ò–ü
const DEFAULT_VIEW_ANGLE = 140; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∞–≥–∞ –ø–∏–∫—Å–µ–ª—è –∏–∑ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "P3.91" –≤–µ—Ä–Ω–µ—Ç 3.91)
const getNumericPixelStep = (pixelStepName: string | null): number | null => {
  if (!pixelStepName) return null;
  const match = pixelStepName.match(/(\d+(\.\d+)?)/);
  if (match && match[0]) {
    const num = parseFloat(match[0]);
    return isNaN(num) ? null : num;
  }
  return null;
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∏–æ–¥–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ) - —É–±—Ä–∞–Ω–∞ –∏–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏, —Ç.–∫. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
/*
const getDiodeType = (pixelStepName: string | null): string => {
  if (!pixelStepName) return "-";
  return pixelStepName.toLowerCase().includes("eco") ? "SMD" : "SMD";
};
*/

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ---
const CalculationResults = ({ opened, onClose, data }: CalculationResultsProps) => {
  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const {
    width: inputWidth, height: inputHeight, screenType, selectedProtection, selectedMaterial,
    selectedPixelStep, selectedCabinet,
    selectedBrightness, selectedRefreshFreq
  } = data;

  // --- –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω ---
  if (!selectedCabinet) {
    return (
      <Drawer opened={opened} onClose={onClose} title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞" position="right" size="xl">
        <Center style={{ height: '100%' }}>
          <Text>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è –∫–∞–±–∏–Ω–µ—Ç.</Text>
        </Center>
      </Drawer>
    );
  }

  // --- –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ ---
  const {
    name: cabinetName, width: cabinetWidth, height: cabinetHeight,
    modulesQ: modulesPerCabinet, powerUnitQ: powerUnitsPerCabinet, receiver: receiversPerCabinet
  } = selectedCabinet;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —è—Ä–∫–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç—É
  const brightness = selectedBrightness;
  const refreshFreq = selectedRefreshFreq;

  // --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
  const screenWidth = parseInt(inputWidth, 10) || 0;
  const screenHeight = parseInt(inputHeight, 10) || 0;

  // –†–∞—Å—á–µ—Ç –∫–æ–ª-–≤–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
  const widthCabHor = Math.floor(screenWidth / cabinetWidth);
  const heightCabHor = Math.floor(screenHeight / cabinetHeight);
  const totalHor = widthCabHor * heightCabHor;
  const widthCabVert = Math.floor(screenWidth / cabinetHeight);
  const heightCabVert = Math.floor(screenHeight / cabinetWidth);
  const totalVert = widthCabVert * heightCabVert;

  // –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const isHorizontal = totalHor >= totalVert;
  const widthCabCount = isHorizontal ? widthCabHor : widthCabVert;
  const heightCabCount = isHorizontal ? heightCabHor : heightCabVert;
  const totalCabinets = widthCabCount * heightCabCount;

  // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
  const finalWidth = widthCabCount * (isHorizontal ? cabinetWidth : cabinetHeight);
  const finalHeight = heightCabCount * (isHorizontal ? cabinetHeight : cabinetWidth);
  const activeArea = (finalWidth * finalHeight) / 1_000_000;

  // --- –†–∞—Å—á–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ –ø–∏–∫—Å–µ–ª–µ–π ---
  const numericPixelStep = getNumericPixelStep(selectedPixelStep);
  let resolution = "-";
  let totalPixels: number | string = "-";
  if (numericPixelStep && numericPixelStep > 0) {
    const heightPixels = Math.round(finalHeight / numericPixelStep);
    const widthPixels = Math.round(finalWidth / numericPixelStep);
    resolution = `${heightPixels}√ó${widthPixels} –ø–∏–∫—Å.`;
    totalPixels = heightPixels * widthPixels;
  } else {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: —à–∞–≥ –ø–∏–∫—Å–µ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.", selectedPixelStep);
  }

  // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–±–∑–æ—Ä–∞
  const viewingDistance = numericPixelStep ? numericPixelStep.toFixed(1) : "-";

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const totalModules = totalCabinets * modulesPerCabinet;
  const totalPowerUnits = totalCabinets * powerUnitsPerCabinet;
  const totalReceivers = totalCabinets * receiversPerCabinet;

  // –ó–ò–ü
  const spareModules = Math.ceil(totalModules * SPARE_PARTS_PERCENTAGE);
  const sparePowerUnits = Math.ceil(totalPowerUnits * SPARE_PARTS_PERCENTAGE);
  const spareReceivers = Math.ceil(totalReceivers * SPARE_PARTS_PERCENTAGE);
  const zipKit = `–º–æ–¥—É–ª–∏-${spareModules}—à—Ç; –ë–ü-${sparePowerUnits}—à—Ç; –∫–∞—Ä—Ç—ã-${spareReceivers}—à—Ç.`;

  // --- –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã (–ó–ê–ì–õ–£–®–ö–ê!) ---
  const calculatePrice = (): string => {
    return "–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ";
  };
  const offerPrice = calculatePrice();

  const handleSaveOffer = () => {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const offerData = {
      inputWidth, inputHeight, screenType, selectedProtection, selectedMaterial,
      selectedPixelStep, selectedCabinet, selectedOptions: data.selectedOptions,
      exchangeRate: data.exchangeRate,
      isHorizontal, widthCabCount, heightCabCount, totalCabinets, finalWidth, finalHeight,
      activeArea: activeArea.toFixed(2), resolution, totalPixels,
      totalModules, totalPowerUnits, totalReceivers, brightness, refreshFreq,
      viewingDistance, zipKit, calculatedPrice: offerPrice
    };
    console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ):", offerData);
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ API
    onClose();
  };

  return (
    <Drawer opened={opened} onClose={onClose} title={<div className={styles.drawerTitle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</div>} position="right" size="xl" styles={{ header: { justifyContent: "center" }, title: { width: "100%", textAlign: "center" } }}>
      <Stack>
        {/* –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
        <Table striped highlightOnHover withTableBorder withColumnBorders className={styles.table} layout="fixed">
          <Table.Thead>
            <Table.Tr>
              <Table.Th className={styles.th} w="40%">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</Table.Th>
              <Table.Th className={styles.th} w="60%">–ó–Ω–∞—á–µ–Ω–∏–µ</Table.Th>
            </Table.Tr>
          </Table.Thead>
          <Table.Tbody>
            <Table.Tr>
              <Table.Td>–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ</Table.Td>
              <Table.Td>{screenType || "-"}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–±–∏–Ω–µ—Ç–∞</Table.Td>
              <Table.Td>{selectedMaterial || "-"}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ú–æ–¥–µ–ª—å –∫–∞–±–∏–Ω–µ—Ç–∞</Table.Td>
              <Table.Td>{cabinetName || "-"}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–†–∞–∑–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ (–í√ó–®)</Table.Td>
              <Table.Td>{`${cabinetHeight}√ó${cabinetWidth} –º–º`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ö–æ–ª-–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–í√ó–®)</Table.Td>
              <Table.Td>{`${heightCabCount}√ó${widthCabCount} = ${totalCabinets} —à—Ç.`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</Table.Td>
              <Table.Td>{isHorizontal ? "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" : "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è"}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ü—ã–ª–µ/–≤–ª–∞–≥–æ–∑–∞—â–∏—Ç–∞</Table.Td>
              <Table.Td>{selectedProtection || "-"}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ö–æ–ª-–≤–æ –º–æ–¥—É–ª–µ–π</Table.Td>
              <Table.Td>{totalModules} —à—Ç.</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–¢–∏–ø –¥–∏–æ–¥–æ–≤</Table.Td>
              <Table.Td>SMD</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–®–∞–≥ –ø–∏–∫—Å–µ–ª—è</Table.Td>
              <Table.Td>{selectedPixelStep || "-"} ({numericPixelStep ? `${numericPixelStep.toFixed(2)} –º–º` : '-'})</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Ç–Ω–∞</Table.Td>
              <Table.Td>{finalWidth} –º–º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Ç–Ω–∞</Table.Td>
              <Table.Td>{finalHeight} –º–º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–í√ó–®)</Table.Td>
              <Table.Td>{resolution}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–∏–∫—Å–µ–ª–µ–π</Table.Td>
              <Table.Td>
                {typeof totalPixels === 'number'
                  ? `${totalPixels.toLocaleString('ru-RU')} –ø–∏–∫—Å.`
                  : totalPixels
                }
              </Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ü–ª–æ—â–∞–¥—å</Table.Td>
              <Table.Td>{activeArea.toFixed(2)} –º¬≤</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–Ø—Ä–∫–æ—Å—Ç—å</Table.Td>
              <Table.Td>{brightness} –∫–¥/–º¬≤</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</Table.Td>
              <Table.Td>{refreshFreq} –ì—Ü</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–£–≥–æ–ª –æ–±–∑–æ—Ä–∞ (–ì¬∞/–í¬∞)</Table.Td>
              <Table.Td>{`${DEFAULT_VIEW_ANGLE}¬∞ / ${DEFAULT_VIEW_ANGLE}¬∞`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–±–∑–æ—Ä–∞</Table.Td>
              <Table.Td>–æ—Ç {viewingDistance} –º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td>–ó–ò–ü</Table.Td>
              <Table.Td>{zipKit}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td><b>–¶–µ–Ω–∞ —Ä–µ—à–µ–Ω–∏—è</b></Table.Td>
              <Table.Td><b>{offerPrice}</b></Table.Td>
            </Table.Tr>
          </Table.Tbody>
        </Table>
        <Center mt="md">
          <Button onClick={handleSaveOffer}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</Button>
        </Center>
      </Stack>
    </Drawer>
  );
};

export default CalculationResults;