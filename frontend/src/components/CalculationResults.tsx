import { Drawer, Table, Button, Center, Text, Stack } from "@mantine/core";
import styles from "../styles/CalculationResults.module.scss";

// --- –¢–∏–ø—ã ---
// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–∏–ø—ã CabinetType –∏ PixelStep –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª types.ts –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å –∏ –≤ DisplayParameters)
type PixelStepInfo = {
  id: number;
  name: string;
  type: string; // –î–æ–±–∞–≤–∏–º type, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
  brightness: number;
  refreshFreq: number;
  // –î–æ–±–∞–≤—å—Ç–µ location/option, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–¥–µ—Å—å
};

type CabinetInfo = {
  id: number;
  name: string;
  width: number;
  height: number;
  pixelStep: string[];
  material: string[];
  modulesQ: number;
  powerUnitQ: number;
  receiver: number;
};

interface CalculationResultsProps {
  opened: boolean;
  onClose: () => void;
  data: {
    width: string;
    height: string;
    screenType: string | null;
    selectedProtection: string | null;
    selectedMaterial: string | null;
    selectedPixelStep: string | null;
    selectedCabinet: CabinetInfo | null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
    // –£–±—Ä–∞–Ω—ã cabinetName, cabinetWidth, cabinetHeight
    selectedOptions: string[];
    pixelSteps: PixelStepInfo[]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
    exchangeRate: number; // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –∫—É—Ä—Å–∞
  };
}

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const SPARE_PARTS_PERCENTAGE = 0.05; // 5% –ó–ò–ü
const DEFAULT_VIEW_ANGLE = 149; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–π

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
const extractNumericPixelStep = (pixelStepName: string | null): string => {
  if (!pixelStepName) return "-";
  const match = pixelStepName.match(/\d+(\.\d+)?/);
  return match ? match[0] : "-";
};

const getDiodeType = (pixelStepName: string | null): string => {
  if (!pixelStepName) return "-";
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —Ç–∏–ø—ã —Å–ª–æ–∂–Ω–µ–µ
  return pixelStepName.toLowerCase().includes("eco") ? "SMD" : "SMD2";
};

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ---
const CalculationResults = ({
  opened,
  onClose,
  data,
}: CalculationResultsProps) => {
  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  const {
    width: inputWidth, // –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —à–∏—Ä–∏–Ω–æ–π –∫–∞–±–∏–Ω–µ—Ç–∞
    height: inputHeight,
    screenType,
    selectedProtection,
    selectedMaterial,
    selectedPixelStep,
    selectedCabinet, // –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç
    selectedOptions,
    pixelSteps,
    exchangeRate,
  } = data;

  // --- –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω ---
  // (–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ inputWidth/inputHeight, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  if (!selectedCabinet) {
    // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å null –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É –≤–Ω—É—Ç—Ä–∏ Drawer
    return (
      <Drawer opened={opened} onClose={onClose} title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞" position="right" size="xl">
        <Center style={{ height: '100%' }}>
          <Text>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è –∫–∞–±–∏–Ω–µ—Ç.</Text>
        </Center>
      </Drawer>
    );
  }

  // --- –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ selectedCabinet –Ω–µ null ---
  const {
    name: cabinetName,
    width: cabinetWidth,
    height: cabinetHeight,
    modulesQ: modulesPerCabinet,
    powerUnitQ: powerUnitsPerCabinet,
    receiver: receiversPerCabinet,
  } = selectedCabinet;

  // --- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–≥–µ –ø–∏–∫—Å–µ–ª—è ---
  const selectedStepInfo = pixelSteps.find(
    (step) => step.name === selectedPixelStep
  );
  const brightness = selectedStepInfo?.brightness ?? "-";
  const refreshFreq = selectedStepInfo?.refreshFreq ?? "-";

  // --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
  const screenWidth = parseInt(inputWidth, 10) || 0; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞, —Å fallback –Ω–∞ 0
  const screenHeight = parseInt(inputHeight, 10) || 0;

  // –†–∞—Å—á–µ—Ç –∫–æ–ª-–≤–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  const widthCabinetsHorizontal = Math.floor(screenWidth / cabinetWidth);
  const heightCabinetsHorizontal = Math.floor(screenHeight / cabinetHeight);
  const totalHorizontal = widthCabinetsHorizontal * heightCabinetsHorizontal;

  const widthCabinetsVertical = Math.floor(screenWidth / cabinetHeight); // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —à–∏—Ä–∏–Ω—É/–≤—ã—Å–æ—Ç—É –∫–∞–±–∏–Ω–µ—Ç–∞
  const heightCabinetsVertical = Math.floor(screenHeight / cabinetWidth);
  const totalVertical = widthCabinetsVertical * heightCabinetsVertical;

  // –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const isHorizontal = totalHorizontal >= totalVertical;
  const widthCabinetsCount = isHorizontal ? widthCabinetsHorizontal : widthCabinetsVertical;
  const heightCabinetsCount = isHorizontal ? heightCabinetsHorizontal : heightCabinetsVertical;
  const totalCabinets = widthCabinetsCount * heightCabinetsCount;

  // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–æ—Ç–Ω–∞
  const finalWidth = widthCabinetsCount * (isHorizontal ? cabinetWidth : cabinetHeight);
  const finalHeight = heightCabinetsCount * (isHorizontal ? cabinetHeight : cabinetWidth);
  const activeArea = (finalWidth * finalHeight) / 1_000_000; // –ü–ª–æ—â–∞–¥—å –≤ –º¬≤

  // –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const totalModules = totalCabinets * modulesPerCabinet;
  const totalPowerUnits = totalCabinets * powerUnitsPerCabinet; // –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏
  const totalReceivers = totalCabinets * receiversPerCabinet; // –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è

  // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–±–∑–æ—Ä–∞
  const viewingDistance = extractNumericPixelStep(selectedPixelStep);

  // –†–∞—Å—á–µ—Ç –ó–ò–ü –∫–æ–º–ø–ª–µ–∫—Ç–∞
  const spareModules = Math.ceil(totalModules * SPARE_PARTS_PERCENTAGE);
  const sparePowerUnits = Math.ceil(totalPowerUnits * SPARE_PARTS_PERCENTAGE);
  const spareReceivers = Math.ceil(totalReceivers * SPARE_PARTS_PERCENTAGE);
  const zipKit = `–º–æ–¥—É–ª–∏ - ${spareModules} —à—Ç.; –ë–ü - ${sparePowerUnits} —à—Ç.; –ø—Ä–∏—ë–º–Ω—ã–µ –∫–∞—Ä—Ç—ã - ${spareReceivers} —à—Ç.`;

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø. –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
  const calculatePrice = (): string => {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ totalModules, totalCabinets, exchangeRate –∏ —Ç.–¥.
      // –ù—É–∂–Ω—ã –±—É–¥—É—Ç —Ü–µ–Ω—ã –Ω–∞ –º–æ–¥—É–ª—å, –∫–∞–±–∏–Ω–µ—Ç, –ë–ü, –∫–∞—Ä—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ —Ç.–¥.
      if (exchangeRate && totalModules > 0) {
         // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
         const approximatePricePerModuleUSD = 50; // –û—á–µ–Ω—å –≥—Ä—É–±–æ!
         const totalPriceUSD = totalModules * approximatePricePerModuleUSD;
         const totalPriceRUB = totalPriceUSD * exchangeRate;
         return `${totalPriceRUB.toLocaleString('ru-RU', { maximumFractionDigits: 0 })} ‚ÇΩ (–ø–æ –∫—É—Ä—Å—É ${exchangeRate} ‚ÇΩ/$)`;
      }
      return "–¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞";
  };
  const offerPrice = calculatePrice();


  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
  const handleSaveOffer = () => {
    console.log("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...");
    // –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const offerData = {
        inputWidth, inputHeight, screenType, selectedProtection, selectedMaterial,
        selectedPixelStep, selectedCabinet, selectedOptions, exchangeRate,
        // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
        isHorizontal, widthCabinetsCount, heightCabinetsCount, totalCabinets,
        finalWidth, finalHeight, activeArea: activeArea.toFixed(2),
        totalModules, totalPowerUnits, totalReceivers,
        brightness, refreshFreq, viewingDistance, zipKit,
        calculatedPrice: offerPrice // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Ü–µ–Ω—É
    };
    console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", offerData);
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å offerData –≤ API –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
    onClose(); // –ó–∞–∫—Ä—ã—Ç—å Drawer –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  };


  return (
    <Drawer
      opened={opened}
      onClose={onClose}
      title={<div className={styles.drawerTitle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</div>}
      position="right"
      size="xl"
      styles={{
        header: { justifyContent: 'center' },
        title: { width: '100%', textAlign: 'center' },
      }}
    >
      <Stack> {/* –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–Ω–æ–ø–∫—É –≤ Stack –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ */}
        <Table
          striped
          highlightOnHover
          withTableBorder
          withColumnBorders
          className={styles.table}
          // –î–æ–±–∞–≤–∏–º layout=fixed –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          // layout="fixed"
        >
          <Table.Thead>
            <Table.Tr>
              {/* –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ */}
              <Table.Th className={styles.th} style={{ width: '40%' }}>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</Table.Th>
              <Table.Th className={styles.th} style={{ width: '60%' }}>–ó–Ω–∞—á–µ–Ω–∏–µ</Table.Th>
            </Table.Tr>
          </Table.Thead>
          <Table.Tbody>
            {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */}
            <Table.Tr>
              <Table.Td className={styles.td}>–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞</Table.Td>
              <Table.Td className={styles.td}>{screenType || "-"}</Table.Td>
            </Table.Tr>
             <Table.Tr>
               <Table.Td className={styles.td}>–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–±–∏–Ω–µ—Ç–∞</Table.Td>
               <Table.Td className={styles.td}>{selectedMaterial || "-"}</Table.Td>
             </Table.Tr>
             <Table.Tr>
               <Table.Td className={styles.td}>–ú–æ–¥–µ–ª—å –∫–∞–±–∏–Ω–µ—Ç–∞</Table.Td>
               <Table.Td className={styles.td}>{cabinetName || "-"}</Table.Td>
             </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–†–∞–∑–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ (–í√ó–®)</Table.Td>
              {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ !selectedCabinet */}
              <Table.Td className={styles.td}>{`${cabinetHeight}√ó${cabinetWidth} –º–º`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–í√ó–®)</Table.Td>
              <Table.Td className={styles.td}>{`${heightCabinetsCount}√ó${widthCabinetsCount} = ${totalCabinets} —à—Ç.`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤</Table.Td>
              <Table.Td className={styles.td}>
                {isHorizontal ? "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" : "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è"}
              </Table.Td>
            </Table.Tr>
             <Table.Tr>
               <Table.Td className={styles.td}>–ü—ã–ª–µ- –∏ –≤–ª–∞–≥–æ–∑–∞—â–∏—Ç–∞</Table.Td>
               <Table.Td className={styles.td}>{selectedProtection || "-"}</Table.Td>
             </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π</Table.Td>
              <Table.Td className={styles.td}>{totalModules} —à—Ç.</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–¢–∏–ø –¥–∏–æ–¥–æ–≤</Table.Td>
              <Table.Td className={styles.td}>
                {getDiodeType(selectedPixelStep)}
              </Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ (—à–∞–≥ –ø–∏–∫—Å–µ–ª—è)</Table.Td>
              <Table.Td className={styles.td}>
                {extractNumericPixelStep(selectedPixelStep)} –º–º
              </Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Ç–Ω–∞</Table.Td>
              <Table.Td className={styles.td}>{finalWidth} –º–º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Ç–Ω–∞</Table.Td>
              <Table.Td className={styles.td}>{finalHeight} –º–º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ü–ª–æ—â–∞–¥—å –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏</Table.Td>
              <Table.Td className={styles.td}>{activeArea.toFixed(2)} –º¬≤</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–Ø—Ä–∫–æ—Å—Ç—å</Table.Td>
              <Table.Td className={styles.td}>{brightness} –∫–¥/–º¬≤</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</Table.Td>
              <Table.Td className={styles.td}>{refreshFreq} –ì—Ü</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–£–≥–æ–ª –æ–±–∑–æ—Ä–∞ (–ì¬∞/–í¬∞)</Table.Td>
              <Table.Td className={styles.td}>{`${DEFAULT_VIEW_ANGLE}¬∞ / ${DEFAULT_VIEW_ANGLE}¬∞`}</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–±–∑–æ—Ä–∞</Table.Td>
              <Table.Td className={styles.td}>–æ—Ç {viewingDistance} –º</Table.Td>
            </Table.Tr>
            <Table.Tr>
              <Table.Td className={styles.td}>–ó–ò–ü –∫–æ–º–ø–ª–µ–∫—Ç</Table.Td>
              <Table.Td className={styles.td}>{zipKit}</Table.Td>
            </Table.Tr>
             {/* –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π */}
             <Table.Tr>
               <Table.Td className={styles.td}><b>–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞</b></Table.Td>
               <Table.Td className={styles.td}><b>{offerPrice}</b></Table.Td>
             </Table.Tr>
          </Table.Tbody>
        </Table>
        <Center mt="md">
          <Button onClick={handleSaveOffer}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</Button>
        </Center>
      </Stack>
    </Drawer>
  );
};

export default CalculationResults;